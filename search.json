[{"title":"SOLID","url":"/2025/06/26/Csharp-Solid/","content":"<p>回顧整理複習一下基本觀念</p>\n<h2 id=\"🌟-SOLID-是什麼？\">🌟 SOLID 是什麼？</h2>\n<p>SOLID 是物件導向設計的五大原則，有助於提高系統的可讀性、可維護性與擴充性。</p>\n<p>S – Single Responsibility Principle<br>\nO – Open/Closed Principle<br>\nL – Liskov Substitution Principle<br>\nI – Interface Segregation Principle<br>\nD – Dependency Inversion Principle</p>\n<h2 id=\"🧱-單一職責原則（SRP）\">🧱 單一職責原則（SRP）</h2>\n<p>定義 : 一個模組應有且只有一個理由會使其改變。一個類別只負責一個職責(功能)。<br>\n目的 : 讓類別更專注化、模組化，便於維護與測試<br>\n範例 :</p>\n<pre><code class=\"highlight C#\"><span class=\"comment\">// ❌ 錯誤示範：Report 同時負責產生報告與儲存報告</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Report</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Generate</span>()</span> &#123;\n        <span class=\"comment\">// 產生報告邏輯</span>\n    &#125;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SaveToFile</span>()</span> &#123;\n        <span class=\"comment\">// 儲存報告到檔案的邏輯</span>\n    &#125;\n&#125;\n\n<span class=\"comment\">// ✅ 正確示範：拆分責任，讓每個類別只處理一件事</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ReportGenerator</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> Report <span class=\"title\">Generate</span>()</span> &#123;\n        <span class=\"comment\">// 只負責產生報告</span>\n        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Report();\n    &#125;\n&#125;\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ReportSaver</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SaveToFile</span>(<span class=\"params\">Report report</span>)</span> &#123;\n        <span class=\"comment\">// 只負責儲存報告</span>\n    &#125;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意不要為了拆分而拆分 =&gt; 過度拆分反而造成維護困難、結構過碎、增加開發負擔。</p>\n</blockquote>\n<h2 id=\"🔓-開放封閉原則（OCP）\">🔓 開放封閉原則（OCP）</h2>\n<p>定義 : 一個軟體製品應該對於擴展是開放的，但對於修改是封閉的<br>\n目的 : 當需求變更時，不用修改原有的代碼，只需擴展即可<br>\n範例 : 策略模式</p>\n<pre><code class=\"highlight C#\"><span class=\"comment\">// 定義一個抽象的折扣策略介面</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IDiscountStrategy</span> &#123;\n    <span class=\"function\"><span class=\"built_in\">decimal</span> <span class=\"title\">GetDiscount</span>(<span class=\"params\"><span class=\"built_in\">decimal</span> price</span>)</span>;\n&#125;\n\n<span class=\"comment\">// 沒有折扣的策略</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">NoDiscount</span> : <span class=\"title\">IDiscountStrategy</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> <span class=\"title\">GetDiscount</span>(<span class=\"params\"><span class=\"built_in\">decimal</span> price</span>)</span> =&gt; price;\n&#125;\n\n<span class=\"comment\">// 季節性折扣策略</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SeasonalDiscount</span> : <span class=\"title\">IDiscountStrategy</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> <span class=\"title\">GetDiscount</span>(<span class=\"params\"><span class=\"built_in\">decimal</span> price</span>)</span> =&gt; price * <span class=\"number\">0.9</span>m;\n&#125;\n\n<span class=\"comment\">// 結帳類別依賴抽象折扣策略</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Checkout</span> &#123;\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IDiscountStrategy _discountStrategy;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Checkout</span>(<span class=\"params\">IDiscountStrategy discountStrategy</span>)</span> &#123;\n        _discountStrategy = discountStrategy;\n    &#125;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> <span class=\"title\">GetFinalPrice</span>(<span class=\"params\"><span class=\"built_in\">decimal</span> price</span>)</span> &#123;\n        <span class=\"keyword\">return</span> _discountStrategy.GetDiscount(price);\n    &#125;\n&#125;</code></pre>\n<p>若需新增其他折扣邏輯，如會員折扣，只需新增一個新類別實作 <code>IDiscountStrategy</code>，無須修改 <code>Checkout</code> 類別，符合 OCP。</p>\n<h2 id=\"🧬-里氏替換原則（LSP）\">🧬 里氏替換原則（LSP）</h2>\n<p>定義 : 子類別應該能替換其父類別，且不影響原有程式的正確性<br>\n目的 : 確保繼承的合理性，避免違反多型原則<br>\n範例 :</p>\n<pre><code class=\"highlight C#\"><span class=\"comment\">// 基礎類別</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Bird</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Fly</span>()</span> &#123; &#125;\n&#125;\n\n<span class=\"comment\">// 老鷹可以飛</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Eagle</span> : <span class=\"title\">Bird</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Fly</span>()</span> &#123; <span class=\"comment\">/* 飛行邏輯 */</span> &#125;\n&#125;\n\n<span class=\"comment\">// ❌ 鴕鳥不能飛，卻繼承 Bird，違反 LSP</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Ostrich</span> : <span class=\"title\">Bird</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Fly</span>()</span> &#123;\n        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotSupportedException();\n    &#125;\n&#125;</code></pre>\n<p>🔧 解法：可改為將「可飛的鳥」與「不可飛的鳥」抽象分開。</p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Bird</span> &#123; &#125;\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IFlyable</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Fly</span>()</span>;\n&#125;\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Eagle</span> : <span class=\"title\">Bird</span>, <span class=\"title\">IFlyable</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fly</span>()</span> &#123;\n        Console.WriteLine(<span class=\"string\">&quot;Eagle flies.&quot;</span>);\n    &#125;\n&#125;\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Ostrich</span> : <span class=\"title\">Bird</span> &#123;\n    <span class=\"comment\">// 沒有 Fly 方法，符合實際行為</span>\n&#125;\n</code></pre>\n<h2 id=\"🧩-介面分離原則（ISP）\">🧩 介面分離原則（ISP）</h2>\n<p>定義 : 不要強迫客戶端依賴他們不使用的介面。應將大介面拆分成多個小而專一的介面。<br>\n目的 : 提高系統彈性，避免臃腫的介面影響使用。<br>\n範例 :</p>\n<pre><code class=\"highlight C#\"><span class=\"comment\">// ❌ 不好的設計：介面太大</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IMachine</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span>()</span>;\n    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span>;\n    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Fax</span>()</span>;\n&#125;\n\n<span class=\"comment\">// 有些類別只需要部分功能</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SimplePrinter</span> : <span class=\"title\">IMachine</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span>()</span> &#123; <span class=\"comment\">/* 實作 */</span> &#125;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span> &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotImplementedException(); &#125; <span class=\"comment\">// 不需要</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fax</span>()</span> &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotImplementedException(); &#125;  <span class=\"comment\">// 不需要</span>\n&#125;</code></pre>\n<p>✅ 改善方式：拆分為小型介面</p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IPrinter</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span>()</span>;\n&#125;\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IScanner</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span>;\n&#125;\n\n<span class=\"comment\">// 簡單印表機只實作印表功能</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SimplePrinter</span> : <span class=\"title\">IPrinter</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span>()</span> &#123;\n        Console.WriteLine(<span class=\"string\">&quot;Printing...&quot;</span>);\n    &#125;\n&#125;\n\n<span class=\"comment\">// 多功能印表機可以實作多個介面</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MultiFunctionMachine</span> : <span class=\"title\">IPrinter</span>, <span class=\"title\">IScanner</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span>()</span> &#123; <span class=\"comment\">/*...*/</span> &#125;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span> &#123; <span class=\"comment\">/*...*/</span> &#125;\n&#125;\n</code></pre>\n<h2 id=\"🧲-依賴反轉原則（DIP）\">🧲 依賴反轉原則（DIP）</h2>\n<p>定義 : 1. 高層模組不應該依賴低層模組，兩者都應該依賴抽象 2. 抽象不應依賴細節，細節應依賴抽象。<br>\n目的 : 減少模組之間的耦合，提高可重用性與可測試性。<br>\n範例 : DI</p>\n<pre><code class=\"highlight C#\">\n<span class=\"comment\">// 定義一個訊息傳送的抽象</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IMessageSender</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Send</span>(<span class=\"params\"><span class=\"built_in\">string</span> message</span>)</span>;\n&#125;\n\n<span class=\"comment\">// 實作細節：Email 發送</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmailSender</span> : <span class=\"title\">IMessageSender</span> &#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span>(<span class=\"params\"><span class=\"built_in\">string</span> message</span>)</span> &#123;\n        Console.WriteLine(<span class=\"string\">&quot;Email sent: &quot;</span> + message);\n    &#125;\n&#125;\n\n<span class=\"comment\">// 高層模組依賴抽象，而非 EmailSender</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Notification</span> &#123;\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMessageSender _messageSender;\n\n    <span class=\"comment\">// 傳入抽象介面，實現注入（依賴反轉）</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Notification</span>(<span class=\"params\">IMessageSender messageSender</span>)</span> &#123;\n        _messageSender = messageSender;\n    &#125;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Notify</span>(<span class=\"params\"><span class=\"built_in\">string</span> message</span>)</span> &#123;\n        _messageSender.Send(message);\n    &#125;\n&#125;\n</code></pre>\n<p>使用如 IoC Container (例如 <code>Microsoft.Extensions.DependencyInjection</code>) 可以自動注入 IMessageSender 的實作。</p>\n<h2 id=\"📚-參考\">📚 參考</h2>\n<p><a href=\"https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E4%BD%BF%E4%BA%BA%E7%98%8B%E7%8B%82%E7%9A%84-solid-%E5%8E%9F%E5%89%87-%E7%9B%AE%E9%8C%84-b33fdfc983ca\">使人瘋狂的 SOLID 原則</a></p>\n","categories":["後端"],"tags":["C#"]},{"title":"讓ASP.NET Core服務註冊更優雅","url":"/2025/05/13/IServiceCollection/","content":"<h2 id=\"前言\">前言</h2>\n<p>隨著應用程式變得越來越龐大，需要註冊的服務也隨之增加，<code>Program.cs</code> 中的 <code>builder.Services</code> 區塊可能會變得冗長且難以維護。<br>\n這時候，<code>IServiceCollection</code> 的擴充方法便能派上用場，幫助我們整理程式碼，使其更加清晰和易於管理。</p>\n<blockquote>\n<p>本文範例基於 .NET 6 或更新版本（如 .NET 8）</p>\n</blockquote>\n<h2 id=\"什麼是-IServiceCollection-擴充方法？\">什麼是 IServiceCollection 擴充方法？</h2>\n<p>簡單來說，擴充方法允許我們向現有的型別(<code>IServiceCollection</code>介面)添加新的方法，而無需修改原始型別的程式碼。<br>\n這是一個強大的 C#語言特性，可以幫助我們編寫更具表達力和可重用的程式碼。</p>\n<h2 id=\"為什麼要使用-IServiceCollection-擴充方法？\">為什麼要使用 IServiceCollection 擴充方法？</h2>\n<p>使用<code>IServiceCollection</code>擴充方法帶來了諸多好處</p>\n<ul>\n<li><strong>提升可讀性</strong>：將特定功能的服務註冊邏輯封裝在擴充方法中，可使 <code>Program.cs</code> 更加簡潔，一眼看出應用程式的核心服務。</li>\n<li><strong>增加可重用性</strong>：若多個專案或模組需註冊相同的服務集合，可將邏輯提取成擴充方法，便於重複使用。</li>\n<li><strong>更好的組織結構</strong>：可依照模組或類型，將註冊邏輯組織到不同擴充類別中。</li>\n<li><strong>簡化複雜的註冊邏輯</strong>：封裝需額外配置或條件註冊的服務，讓主要註冊區塊更乾淨。</li>\n</ul>\n<h2 id=\"如何建立和使用-IServiceCollection-擴充方法？\">如何建立和使用 IServiceCollection 擴充方法？</h2>\n<p>建立擴充方法很簡單，只需定義一個靜態類別，並撰寫靜態方法，第一個參數用 <code>this</code> 修飾 <code>IServiceCollection</code>。</p>\n<h3 id=\"1️⃣-註冊自定義服務\">1️⃣ 註冊自定義服務</h3>\n<p>假設我們有一個 <code>MyAwesomeService</code> 實作 <code>IMyAwesomeService</code>，我們希望註冊為單例：</p>\n<pre><code class=\"highlight C#\"><span class=\"comment\">// Extensions/ServiceCollectionExtensions.cs</span>\n<span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">ServiceCollectionExtensions</span>\n&#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IServiceCollection <span class=\"title\">AddMyAwesomeService</span>(<span class=\"params\"><span class=\"keyword\">this</span> IServiceCollection services</span>)</span>\n    &#123;\n        <span class=\"keyword\">return</span> services.AddSingleton&lt;IMyAwesomeService, MyAwesomeService&gt;();\n    &#125;\n&#125;\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IMyAwesomeService</span>\n&#123;\n    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoSomethingAwesome</span>()</span>;\n&#125;\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyAwesomeService</span> : <span class=\"title\">IMyAwesomeService</span>\n&#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DoSomethingAwesome</span>()</span>\n    &#123;\n        Console.WriteLine(<span class=\"string\">&quot;執行一些很棒的操作！&quot;</span>);\n    &#125;\n&#125;\n</code></pre>\n<p>然後在 <code>Program.cs</code> 中使用</p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">var</span> builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddMyAwesomeService();\n<span class=\"comment\">// 其他服務註冊...</span>\n\n<span class=\"keyword\">var</span> app = builder.Build();\napp.Run();</code></pre>\n<h3 id=\"2️⃣-註冊多個相關服務\">2️⃣ 註冊多個相關服務</h3>\n<p>我們可以一次註冊一組資料存取服務：</p>\n<pre><code class=\"highlight C#\"><span class=\"comment\">// Extensions/DataAccessServiceExtensions.cs</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">DataAccessServiceExtensions</span>\n&#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IServiceCollection <span class=\"title\">AddDataAccessServices</span>(<span class=\"params\"><span class=\"keyword\">this</span> IServiceCollection services, <span class=\"built_in\">string</span> connectionString</span>)</span>\n    &#123;\n        services.AddScoped&lt;IDataContext&gt;(provider =&gt; <span class=\"keyword\">new</span> DataContext(connectionString));\n        services.AddScoped&lt;IUserRepository, UserRepository&gt;();\n        services.AddScoped&lt;IProductRepository, ProductRepository&gt;();\n        <span class=\"keyword\">return</span> services;\n    &#125;\n&#125;</code></pre>\n<p>在 <code>Program.cs</code> 中使用：</p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">var</span> builder = WebApplication.CreateBuilder(args);\n<span class=\"keyword\">var</span> connectionString = builder.Configuration.GetConnectionString(<span class=\"string\">&quot;DefaultConnection&quot;</span>);\n\nbuilder.Services.AddDataAccessServices(connectionString);\n\n<span class=\"keyword\">var</span> app = builder.Build();\napp.Run();\n</code></pre>\n<h3 id=\"3️⃣-根據環境註冊不同的服務\">3️⃣ 根據環境註冊不同的服務</h3>\n<p>根據開發或生產環境註冊不同的實作類別：</p>\n<pre><code class=\"highlight C#\"><span class=\"comment\">// Extensions/EnvironmentSpecificServiceExtensions.cs</span>\n<span class=\"keyword\">using</span> Microsoft.Extensions.Hosting;\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">EnvironmentSpecificServiceExtensions</span>\n&#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IServiceCollection <span class=\"title\">AddEnvironmentSpecificServices</span>(<span class=\"params\"><span class=\"keyword\">this</span> IServiceCollection services, IHostEnvironment environment</span>)</span>\n    &#123;\n        <span class=\"keyword\">if</span> (environment.IsDevelopment())\n        &#123;\n            services.AddTransient&lt;IEmailService, DevelopmentEmailService&gt;();\n        &#125;\n        <span class=\"keyword\">else</span>\n        &#123;\n            services.AddTransient&lt;IEmailService, ProductionEmailService&gt;();\n        &#125;\n        <span class=\"keyword\">return</span> services;\n    &#125;\n&#125;\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IEmailService</span>\n&#123;\n    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SendEmail</span>(<span class=\"params\"><span class=\"built_in\">string</span> to, <span class=\"built_in\">string</span> subject, <span class=\"built_in\">string</span> body</span>)</span>;\n&#125;\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DevelopmentEmailService</span> : <span class=\"title\">IEmailService</span>\n&#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SendEmail</span>(<span class=\"params\"><span class=\"built_in\">string</span> to, <span class=\"built_in\">string</span> subject, <span class=\"built_in\">string</span> body</span>)</span>\n    &#123;\n        Console.WriteLine(<span class=\"string\">$&quot;[開發環境] 發送郵件至 <span class=\"subst\">&#123;to&#125;</span>，標題：<span class=\"subst\">&#123;subject&#125;</span>&quot;</span>);\n    &#125;\n&#125;\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductionEmailService</span> : <span class=\"title\">IEmailService</span>\n&#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SendEmail</span>(<span class=\"params\"><span class=\"built_in\">string</span> to, <span class=\"built_in\">string</span> subject, <span class=\"built_in\">string</span> body</span>)</span>\n    &#123;\n        Console.WriteLine(<span class=\"string\">$&quot;[生產環境] 正在發送郵件至 <span class=\"subst\">&#123;to&#125;</span>，標題：<span class=\"subst\">&#123;subject&#125;</span>...&quot;</span>);\n        <span class=\"comment\">// 真正的發送程式碼</span>\n    &#125;\n&#125;</code></pre>\n<p>在 <code>Program.cs</code> 中使用：</p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">var</span> builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddEnvironmentSpecificServices(builder.Environment);\n\n<span class=\"keyword\">var</span> app = builder.Build();\napp.Run();</code></pre>\n<h2 id=\"結語\">結語</h2>\n<p><code>IServiceCollection</code> 擴充方法是一個強大且實用的工具，能幫助我們更好地組織與管理 <a href=\"http://ASP.NET\">ASP.NET</a> Core 中的服務註冊邏輯。<br>\n透過封裝服務註冊至擴充方法，可讓 <code>Program.cs</code> 更加清晰、模組化，並提升可維護性與重用性。</p>\n<h2 id=\"參考資料\">參考資料</h2>\n<ul>\n<li><a href=\"https://learn.microsoft.com/zh-tw/dotnet/api/microsoft.extensions.dependencyinjection.iservicecollection?view=net-8.0\">IServiceCollection 介面 (Microsoft Learn)</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-tw/aspnet/core/fundamentals/?view=aspnetcore-8.0&amp;tabs=windows\">.NET Hosting 模型變更</a></li>\n<li><a href=\"https://gemini.google.com/app\">Gemini</a></li>\n<li><a href=\"https://chatgpt.com/?model=auto\">ChatGpt</a></li>\n</ul>\n","categories":["後端"],"tags":["C#"]},{"title":"CryptoJS 前端加密工具筆記","url":"/2025/08/01/cryptojs/","content":"<p>簡單記錄一下前端加密實用的工具 <strong>CryptoJS</strong>。<br>\n這是一個功能齊全的 JavaScript 加密套件，支援多種加密與雜湊演算法，使用上也非常直覺。</p>\n<h2 id=\"🔧-安裝\">🔧 安裝</h2>\n<pre><code class=\"highlight bash\">npm i crypto-js</code></pre>\n<p>若使用 TypeScript，建議額外安裝型別定義</p>\n<pre><code class=\"highlight bash\">npm i @types/crypto-js</code></pre>\n<h2 id=\"📦-引用方式\">📦 引用方式</h2>\n<p>你可以選擇引入整個套件，或是只引入你需要的模組：</p>\n<pre><code class=\"highlight ts\"><span class=\"comment\">// 引入整包</span>\n<span class=\"keyword\">import</span> <span class=\"title class_\">CryptoJS</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;crypto-js&quot;</span>;\n\n<span class=\"comment\">// 只引入 AES 模組</span>\n<span class=\"keyword\">import</span> <span class=\"variable constant_\">AES</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;crypto-js/aes&quot;</span>;\n<span class=\"comment\">// 只引入 SHA256 模組</span>\n<span class=\"keyword\">import</span> <span class=\"title class_\">SHA256</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;crypto-js/sha256&quot;</span>;</code></pre>\n<p>建議只引入需要的模組以減少打包大小。</p>\n<h2 id=\"🔐-常用功能與範例\">🔐 常用功能與範例</h2>\n<h3 id=\"AES-加密-解密\">AES 加密 / 解密</h3>\n<pre><code class=\"highlight ts\"><span class=\"keyword\">import</span> <span class=\"variable constant_\">AES</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;crypto-js/aes&quot;</span>;\n<span class=\"keyword\">import</span> <span class=\"title class_\">Utf8</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;crypto-js/enc-utf8&quot;</span>;\n\n<span class=\"comment\">// 使用密鑰</span>\n<span class=\"keyword\">const</span> secret = <span class=\"string\">&quot;my-secret-key&quot;</span>; <span class=\"comment\">// 密鑰建議使用 .env 檔案保存</span>\n<span class=\"comment\">// const secret = import.meta.env.VITE_CRYPTO_SECRET;</span>\n<span class=\"keyword\">const</span> data = <span class=\"string\">&quot;Hello, CryptoJS!&quot;</span>;\n\n<span class=\"comment\">// 加密</span>\n<span class=\"keyword\">const</span> encrypted = <span class=\"variable constant_\">AES</span>.<span class=\"title function_\">encrypt</span>(data, secret).<span class=\"title function_\">toString</span>();\n<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Encrypted:&quot;</span>, encrypted);\n\n<span class=\"comment\">// 解密</span>\n<span class=\"keyword\">const</span> bytes = <span class=\"variable constant_\">AES</span>.<span class=\"title function_\">decrypt</span>(encrypted, secret);\n<span class=\"keyword\">const</span> decrypted = bytes.<span class=\"title function_\">toString</span>(<span class=\"title class_\">Utf8</span>);\n<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Decrypted:&quot;</span>, decrypted);</code></pre>\n<h3 id=\"Base64-編碼-解碼\">Base64 編碼 / 解碼</h3>\n<pre><code class=\"highlight ts\"><span class=\"keyword\">import</span> <span class=\"title class_\">Base64</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;crypto-js/enc-base64&quot;</span>;\n<span class=\"keyword\">import</span> <span class=\"title class_\">Utf8</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;crypto-js/enc-utf8&quot;</span>;\n\n<span class=\"keyword\">const</span> text = <span class=\"string\">&quot;Hello, world!&quot;</span>;\n<span class=\"keyword\">const</span> wordArray = <span class=\"title class_\">Utf8</span>.<span class=\"title function_\">parse</span>(text);\n<span class=\"keyword\">const</span> encoded = <span class=\"title class_\">Base64</span>.<span class=\"title function_\">stringify</span>(wordArray);\n<span class=\"keyword\">const</span> decoded = <span class=\"title class_\">Base64</span>.<span class=\"title function_\">parse</span>(encoded).<span class=\"title function_\">toString</span>(<span class=\"title class_\">Utf8</span>);\n\n<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Encoded:&quot;</span>, encoded);\n<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Decoded:&quot;</span>, decoded);</code></pre>\n<h2 id=\"📚-支援的加密與雜湊演算法\">📚 支援的加密與雜湊演算法</h2>\n<p>詳情可查看<a href=\"https://www.npmjs.com/package/crypto-js#list-of-modules\">List of modules</a></p>\n<ul>\n<li>雜湊：MD5、SHA1、SHA256、SHA512、RIPEMD160 等</li>\n<li>加密：AES、DES、TripleDES、Rabbit、RC4</li>\n<li>編碼：Base64、Hex、Utf8、Latin1 等</li>\n</ul>\n<h2 id=\"🧾-備註\">🧾 備註</h2>\n<h3 id=\"🔍-適用情境\">🔍 適用情境</h3>\n<ul>\n<li>加密 localStorage、cookie、URL 參數等</li>\n<li>使用 SHA256 等雜湊演算法前處理資料</li>\n<li>前端傳送加密資訊給後端（再由後端解密驗證）</li>\n</ul>\n<h3 id=\"❌-不建議使用情境\">❌ 不建議使用情境</h3>\n<ul>\n<li>金鑰管理（前端無法保密金鑰）</li>\n<li>加密極機密資料（應交由後端）</li>\n<li>敏感身份驗證與權限控管</li>\n</ul>\n<h2 id=\"📌-參考\">📌 參考</h2>\n<ul>\n<li><a href=\"https://github.com/brix/crypto-js\">CryptoJS GitHub</a></li>\n<li><a href=\"https://cryptojs.gitbook.io/docs\">CryptoJS 官方文件</a></li>\n<li><a href=\"https://www.letswrite.tw/crypto-js/\">CryptoJS 用前端加密、解密</a></li>\n</ul>\n","categories":["前端"],"tags":["加密"]},{"title":"Asp.Net Core 讀取環境變數連線字串","url":"/2025/04/25/csharpenv/","content":"<h2 id=\"Program-cs-設定\">Program.cs 設定</h2>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">var</span> builder = WebApplication.CreateBuilder(args);\n\nbuilder.Configuration\n    .AddUserSecrets&lt;Program&gt;() <span class=\"comment\">// 使用秘密管理員(本地開發用)</span>\n    .AddEnvironmentVariables(); <span class=\"comment\">// 讀取環境變數</span>\n    <span class=\"comment\">// .AddEnvironmentVariables(prefix:&#123;前墜&#125;) 預設ASPNETCORE_或DOTNET_</span></code></pre>\n<h2 id=\"環境變數設定方式\">環境變數設定方式</h2>\n<ol>\n<li>在主機上開啟：</li>\n</ol>\n<ul>\n<li>Win + S 搜尋「環境變數」或</li>\n<li>控制台 → 系統 → 進階系統設定 → 環境變數</li>\n</ul>\n<ol start=\"2\">\n<li>在「系統變數」中新增：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ASPNETCORE_ConnectionStrings__DefaultConnection</td>\n<td>User Id=prod;Password=XXX;Data Source=oraclehost:1521/PRODDB;</td>\n</tr>\n</tbody>\n</table>\n<p>★ 注意前墜預設要為 <code>ASPNETCORE_</code>或 <code>DOTNET_</code><br>\n★ <code>ConnectionStrings__DefaultConnection</code>是雙底線<code>__</code></p>\n<h2 id=\"預設主機設定來源\">預設主機設定來源</h2>\n<p>WebApplicationBuilder(.NET6 後) 優先級別</p>\n<ol>\n<li>使用命令列設定提供者的命令列引數</li>\n<li>使用 DOTNET_且具有 前置詞的環境變數</li>\n<li>使用 ASPNETCORE_且具有 前置詞的環境變數</li>\n</ol>\n<p>IHostedService (.NET5 前) 優先級別</p>\n<ol>\n<li>使用 ASPNETCORE_且具有 前置詞的環境變數。</li>\n<li>使用命令列設定提供者的命令列引數</li>\n<li>使用 DOTNET_且具有 前置詞的環境變數</li>\n</ol>\n<h2 id=\"測試\">測試</h2>\n<p>在 program.cs 添加 debug endpoint</p>\n<pre><code class=\"highlight C#\">app.MapGet(<span class=\"string\">&quot;/env-check&quot;</span>, (IConfiguration config) =&gt;\n&#123;\n    <span class=\"keyword\">return</span> config.GetConnectionString(<span class=\"string\">&quot;DefaultConnection&quot;</span>) ?? <span class=\"string\">&quot;no conn string&quot;</span>;\n&#125;);</code></pre>\n<ol>\n<li>部署後呼叫 /env-check</li>\n<li>檢查回傳的連線字串內容是否正確</li>\n<li>看有沒有缺少冒號、斜線、空格或打錯字</li>\n</ol>\n<h2 id=\"進階\">進階</h2>\n<p>就算設定環境變數來避免將敏感資料寫入程式，比 appsettings.json 安全，但是還是有相關風險<br>\n所以可能會進一步需要<code>機密管理服務（Secrets Management Services）</code>來去管理敏感資訊<br>\n但這邊用不到就大概紀錄一下可能的更優解，因為要 💸</p>\n<h3 id=\"環境變數的侷限\">環境變數的侷限</h3>\n<table>\n<thead>\n<tr>\n<th>問題點</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>被誤讀</td>\n<td>足夠權限的使用者可透過指令查看所有變數</td>\n</tr>\n<tr>\n<td>難管理</td>\n<td>每台機器都要單獨設定，不適合大型或多環境部署</td>\n</tr>\n<tr>\n<td>無審計紀錄</td>\n<td>無法追蹤誰改了哪個變數、何時改的</td>\n</tr>\n<tr>\n<td>版本控管</td>\n<td>無法追蹤歷史紀錄或自動回復舊版本</td>\n</tr>\n<tr>\n<td>變更難通知</td>\n<td>改變值，需要人為通知開發 / 系統人員重啟服務</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Azure-Key-Vault-為例的優勢\">Azure Key Vault 為例的優勢</h3>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>好處</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>集中管理</td>\n<td>所有機密集中存於一個 Vault，減少散落風險</td>\n</tr>\n<tr>\n<td>權限控管</td>\n<td>使用 Azure AD、RBAC 控制誰能取用哪些機密</td>\n</tr>\n<tr>\n<td>自動輪換密鑰</td>\n<td>可結合自動化工具定期更新連線密碼、憑證等</td>\n</tr>\n<tr>\n<td>加密儲存</td>\n<td>Vault 本身以高強度加密保存內容</td>\n</tr>\n<tr>\n<td>稽核與日誌</td>\n<td>每次存取都會記錄，便於日後查詢與調查</td>\n</tr>\n<tr>\n<td>不用再碰密碼</td>\n<td>程式碼用 Identity 存取 Vault，不需要明碼存在任何地方</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"參考資料\">參考資料</h2>\n<ul>\n<li><a href=\"https://learn.microsoft.com/zh-tw/aspnet/core/fundamentals/configuration/?view=aspnetcore-9.0\">ASP.NET Core 的設定</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/environments?view=aspnetcore-9.0\">Use multiple environments in ASP.NET Core</a></li>\n<li>ChatGpt</li>\n<li><a href=\"https://azure.microsoft.com/en-us/products/key-vault\">Azure Key Vault</a></li>\n</ul>\n","categories":["後端"],"tags":["C#"]},{"title":"Brotato + DLC 難度 5 建議(全角色) + 新構建(中翻)","url":"/2024/11/26/brotato/","content":"<p><img src=\"/images/bratato.jpg\" alt=\"brotato.jpg\"><br>\n<a href=\"https://steamcommunity.com/sharedfiles/filedetails/?id=3018964960\">文章原文</a></p>\n<h2 id=\"一般建議\">一般建議</h2>\n<p>不要小看<code>運氣(Luck)</code>與<code>收穫(Harvesting)</code><br>\n你越早拿到運氣跟收穫，後面的回報越多<br>\n下面是個例子<br>\n<img src=\"/images/harvestExample.jpg\" alt=\"harvestExample.jpg\"><br>\n這並非意味著每次都必須選擇<code>收穫(Harvesting)</code>但越早提升收益越大<br>\n<code>運氣(Luck)</code>也是同理，越早提升可以有更好的商店選擇與升級選項<br>\n所以如果你在難度 5 下某些角色玩得很吃力，可以嘗試在前期提升<code>收穫(Harvesting)</code>和<code>運氣(Luck)</code><br>\n或許會讓你玩起來較舒服<br>\n下圖說明<code>運氣(Luck)</code>如何影響遊戲<br>\n<img src=\"/images/luck.png\" alt=\"lucky.png\"><br>\n然後下圖說明<code>運氣(Luck)</code>數值對商店的影響，但不要忘記升級異形素材掉落<br>\n<img src=\"/images/luckShop.jpg\" alt=\"luckShop.jpg\"><br>\n一般而言，你不需要太多就可以完成難度 5，只需要了解角色跟物品的聯動</p>\n<h2 id=\"消耗品、治療與寶箱-重要\">消耗品、治療與寶箱(重要!!!)</h2>\n<p>😱<code>除非需要補血，請不要拾取消耗品跟寶箱</code>😱<br>\n因為如果你滿血拾取，將不會獲得任何效益<br>\n消耗品跟寶箱在波數結束的時候會自動拾取<br>\n<img src=\"/images/healPick.jpg\" alt=\"healPick.jpg\"><br>\n<img src=\"/images/lootCrate.jpg\" alt=\"lootCrate.jpg\"><br>\n這個技巧適合用於你想要秒殺菁英怪，因為他會掉落一個傳奇寶箱可以回復 100HP<br>\n如果你滿血就保留到需要的時候再用<br>\n這是一個很有用的策略，但常常被忽略<br>\n所以滿血的時候，就不要撿消耗品跟寶箱</p>\n<p>除非你的操作很神，要不然你一定會需要補血，他會在關鍵時刻救你一命 🤡<br>\n<img src=\"/images/healBuff.jpg\" alt=\"healBuff.jpg\"></p>\n<h2 id=\"難度-5-推薦物品-I-got-you\">難度 5 推薦物品!!!(I got you)</h2>\n<p>有些物品可以極大的幫助你通過難度 5<br>\n首選是妖精(Fairy)幾乎必選，其餘的可以參考下圖<br>\n建議在較低的難度解鎖這些裝備，這樣你就可以在難度 5 使用它<br>\n<img src=\"/images/betterItem.jpg\" alt=\"betterItem.jpg\"></p>\n<h2 id=\"S-Tier-Items\">S-Tier Items</h2>\n<p>為什麼要盡量取得這些裝備???</p>\n<ul>\n<li>讓你遊戲更順利</li>\n<li>巨大價值，且幾乎回本</li>\n<li>傷害越高，你殺敵的速度就越快，殺的敵人越多，你獲得的材料也就越多。</li>\n<li>越早獲得圖片中 S 級裝備裡那些提供收穫（Harvesting）的裝備，它們回本的速度就越快。</li>\n</ul>\n<p><strong>注意!!!</strong><br>\n為什麼那些可以<code>增加敵人數量</code>的裝備是好東西??<br>\n因為每回合刷新的敵人越多，整場遊戲中獲得的材料也會越多。因此，記得留意這類裝備。</p>\n<p>但也要留心，有些裝備在第 15 波之後就不太值得拿了，具體取決於你獲得它們的時間。<br>\n以下列出的裝備幾乎適用於遊戲中每個角色，所以它們被歸入了 S 級。<br>\n<img src=\"/images/SRankItems.jpg\" alt=\"SRankItems.jpg\"></p>\n<p><strong>特別</strong><br>\n為什麼選擇 Ugly Tooth??<br>\n如果你覺得你常常被菁英怪或 BOSS 貼著打或是覺得移動速度不夠躲怪那就選它<br>\n它是遊戲中影響力最大的裝備之一，特別是在你的跑圖狀況不穩的時候，能起到很大的作用<br>\n如果你目前可以輕鬆清場，那就不需要它<br>\n<img src=\"/images/uglyTooth.jpg\" alt=\"uglyTooth.jpg\"></p>\n<h2 id=\"F-Tier-Items-幾乎不選\">F-Tier Items(幾乎不選)</h2>\n<p>為什麼要盡量避免選擇這些物品??<br>\n因為這些裝備的副作用會隨著遊戲的進行越來越擴大</p>\n<ol>\n<li>減少敵人數量的裝備，代表經濟收益減少</li>\n<li>希望敵人速度比你慢才不容易貼到你，所以給敵人速度加乘的裝備不建議選擇</li>\n</ol>\n<p><img src=\"/images/FTireItems.jpg\" alt=\"FTireItems.jpg\"></p>\n<h2 id=\"工程學\">工程學</h2>\n<p>可以提升結構物的傷害跟治療量，也會提升板手跟起子的傷害</p>\n<p>工程學會不會太強?<br>\n對於某些角色有負面%傷害加成的角色是蠻強的<br>\n因為<code>工程學</code>是一個獨立的屬性不依賴其他<code>%傷害</code>、<code>範圍傷害</code>或<code>近距離傷害</code><br>\n因此你可以專注於提升你的<code>閃避</code>、<code>生命</code>、<code>生命再生</code>、<code>護甲</code>，不用關心其他傷害只要升<code>工程學</code>就好<br>\n<img src=\"/images/engineering.jpg\" alt=\"engineering.jpg\"></p>\n<p>舉例，假設你的炮台沒有貫穿，然後你選擇下面的道具<br>\n<img src=\"/images/sharpBullet.jpg\" alt=\"sharpBullet.jpg\"><br>\n你的結構物不會被-%傷害影響，因為結構物不受其影響，所以對結構物這個道具是很有用的</p>\n<p>還在施工中…</p>\n<h2 id=\"參考資料\">參考資料</h2>\n<ul>\n<li><a href=\"https://steamcommunity.com/sharedfiles/filedetails/?id=3018964960\">https://steamcommunity.com/sharedfiles/filedetails/?id=3018964960</a></li>\n<li><a href=\"https://brotato.wiki.spellsandguns.com/Brotato_Wiki\">https://brotato.wiki.spellsandguns.com/Brotato_Wiki</a></li>\n<li><a href=\"https://docs.google.com/document/d/1-c33h4oZwmWj3ZOz4xp0HN4vIyMXxOwGK8Rm8e4mfKE/edit?tab=t.0#heading=h.dvp9r7tx7asm\">https://docs.google.com/document/d/1-c33h4oZwmWj3ZOz4xp0HN4vIyMXxOwGK8Rm8e4mfKE/edit?tab=t.0#heading=h.dvp9r7tx7asm</a></li>\n</ul>\n","categories":["遊戲"],"tags":["遊戲"]},{"title":"C# 使用 curl.exe 呼叫api","url":"/2024/11/19/curl/","content":"<h2 id=\"概述\">概述</h2>\n<p>有時候開發軟體的版本過舊，導致介接 API 會異常困難<br>\n學長說可以用 curl 來呼叫 api，所以就來看看怎麼用</p>\n<h2 id=\"DownLoad-curl-exe\">DownLoad curl.exe</h2>\n<p><a href=\"https://curl.se/download.html#Win64\">https://curl.se/download.html#Win64</a></p>\n<h2 id=\"CurlHelper-cs\">CurlHelper.cs</h2>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CurlHelper</span>\n    &#123;\n        <span class=\"comment\">// curl.exe 路徑</span>\n        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> CurlPath = <span class=\"string\">$&quot;C:\\\\CURLDEMO\\\\EXE\\\\CURL.EXE&quot;</span>;\n\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> Get 請求</span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;url&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;headers&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetRequest</span>(<span class=\"params\"><span class=\"built_in\">string</span> url, Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; headers = <span class=\"literal\">null</span></span>)</span>\n        &#123;\n            <span class=\"built_in\">string</span> arugments = <span class=\"string\">$&quot;-X GET \\&quot;<span class=\"subst\">&#123;url&#125;</span>\\&quot;&quot;</span>;\n            <span class=\"keyword\">if</span> (headers != <span class=\"literal\">null</span>)\n            &#123;\n                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> header <span class=\"keyword\">in</span> headers)\n                &#123;\n                    arugments += <span class=\"string\">$&quot; -H \\&quot;<span class=\"subst\">&#123;header.Key&#125;</span>: <span class=\"subst\">&#123;header.Value&#125;</span>\\&quot;&quot;</span>;\n                &#125;\n            &#125;\n            <span class=\"keyword\">return</span> ExecuteCurlCommand(arugments);\n        &#125;\n\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> POST 請求(JSON資料)</span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;url&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;jsonData&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;headers&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">PostRequest</span>(<span class=\"params\"><span class=\"built_in\">string</span> url, <span class=\"built_in\">string</span> jsonData, Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; headers = <span class=\"literal\">null</span></span>)</span>\n        &#123;\n            <span class=\"built_in\">string</span> arguments = <span class=\"string\">$&quot;-X POST -H \\&quot;Content-Type: application/json\\&quot; -d \\&quot;<span class=\"subst\">&#123;jsonData&#125;</span>\\&quot; \\&quot;<span class=\"subst\">&#123;url&#125;</span>\\&quot;&quot;</span>;\n            <span class=\"keyword\">if</span> (headers != <span class=\"literal\">null</span>)\n            &#123;\n                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> header <span class=\"keyword\">in</span> headers)\n                &#123;\n                    arguments += <span class=\"string\">$&quot; -H \\&quot;<span class=\"subst\">&#123;header.Key&#125;</span>: <span class=\"subst\">&#123;header.Value&#125;</span>\\&quot;&quot;</span>;\n                &#125;\n            &#125;\n            <span class=\"keyword\">return</span> ExecuteCurlCommand(arguments);\n        &#125;\n\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> POST 請求(表單資料)</span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;url&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;formData&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;headers&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">PostFormRequest</span>(<span class=\"params\"><span class=\"built_in\">string</span> url, Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; formData, Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; headers = <span class=\"literal\">null</span></span>)</span>\n        &#123;\n            <span class=\"built_in\">string</span> arguments = <span class=\"string\">&quot;-X POST&quot;</span>;\n            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> formData)\n            &#123;\n                arguments += <span class=\"string\">$&quot; -F \\&quot;<span class=\"subst\">&#123;item.Key&#125;</span>=<span class=\"subst\">&#123;item.Value&#125;</span>\\&quot;&quot;</span>;\n            &#125;\n            arguments += <span class=\"string\">$&quot; \\&quot;<span class=\"subst\">&#123;url&#125;</span>\\&quot;&quot;</span>;\n            <span class=\"keyword\">if</span> (headers != <span class=\"literal\">null</span>)\n            &#123;\n                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> header <span class=\"keyword\">in</span> headers)\n                &#123;\n                    arguments += <span class=\"string\">$&quot; -H \\&quot;<span class=\"subst\">&#123;header.Key&#125;</span>: <span class=\"subst\">&#123;header.Value&#125;</span>\\&quot;&quot;</span>;\n                &#125;\n            &#125;\n            <span class=\"keyword\">return</span> ExecuteCurlCommand(arguments);\n        &#125;\n\n\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> 執行curl命令返回輸出</span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;arguments&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">ExecuteCurlCommand</span>(<span class=\"params\"><span class=\"built_in\">string</span> arguments</span>)</span>\n        &#123;\n            <span class=\"keyword\">var</span> startInfo = <span class=\"keyword\">new</span> ProcessStartInfo\n            &#123;\n                FileName = CurlPath,\n                Arguments = arguments,\n                RedirectStandardOutput = <span class=\"literal\">true</span>,\n                UseShellExecute = <span class=\"literal\">false</span>,\n                CreateNoWindow = <span class=\"literal\">true</span>,\n            &#125;;\n            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> p = Process.Start(startInfo))\n            &#123;\n                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> reader = p.StandardOutput)\n                &#123;\n                    <span class=\"keyword\">return</span> reader.ReadToEnd();\n                &#125;\n            &#125;\n        &#125;\n    &#125;</code></pre>\n<h2 id=\"Usage\">Usage</h2>\n<pre><code class=\"highlight C#\"><span class=\"built_in\">string</span> url = <span class=\"string\">&quot;apiurl...&quot;</span>;\n<span class=\"keyword\">var</span> headers = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt;\n&#123;\n      &#123;<span class=\"string\">&quot;Authorization&quot;</span>, <span class=\"string\">&quot;Bearer your_api_key&quot;</span>&#125;\n&#125;;\n<span class=\"built_in\">string</span> response = CurlHelper.GetRequest(url, headers);\nConsole.WriteLine(<span class=\"string\">&quot;Get Response: &quot;</span> + response);</code></pre>\n","categories":["後端"],"tags":["C#","Curl"]},{"title":"DI 生命週期（LifeTime）筆記","url":"/2025/06/30/di-lifecycle/","content":"<p>在進入 LifeTime 前，我們先簡單介紹什麼是 <strong>IoC（控制反轉）</strong> 和 <strong>DI（依賴注入）</strong></p>\n<h2 id=\"🔄-IoC（Inversion-of-Control）\">🔄 IoC（Inversion of Control）</h2>\n<blockquote>\n<p>把「誰來決定建立物件」這件事，<strong>從自己手上交給別人（框架）處理</strong>。</p>\n</blockquote>\n<p>以前我們常會自己用 <code>new</code> 去建立物件：</p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">var</span> service = <span class=\"keyword\">new</span> MyService();</code></pre>\n<p><img src=\"/images/di-lifecycle/0_3DIWQ4HsdSzFlYe9.webp\" alt=\"selfnew.webp\"></p>\n<p>這種做法會導致高耦合，測試與擴充都不易。<br>\n透過 <strong>IoC</strong>，可以把物件的控制權交給「容器」處理，達到解耦與彈性注入的目的。</p>\n<p><img src=\"/images/di-lifecycle/0_TaUixB5JQ0uP10O8.webp\" alt=\"ioc_container.webp\"></p>\n<p>🎯 實際比喻</p>\n<ul>\n<li>傳統方式：店家收到訂單後，自行找外送員送餐</li>\n<li>IoC 容器：店家透過 外送平台（IoC 容器） 處理訂單與安排外送</li>\n</ul>\n<h2 id=\"NET-Core-中的-DI-機制\">.NET Core 中的 DI 機制</h2>\n<p>.NET Core 內建支援 DI，使用<code>Microsoft.Extensions.DependencyInjection</code> 命名空間。<br>\n註冊服務時，會指定服務的生命週期（LifeTime），常見的有以下三種：</p>\n<table>\n<thead>\n<tr>\n<th>LifeTime 類型</th>\n<th>說明</th>\n<th>建立時機</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Transient</strong></td>\n<td>每次請求都產生新實例</td>\n<td>每次呼叫時</td>\n</tr>\n<tr>\n<td><strong>Scoped</strong></td>\n<td>每個 HTTP Request 共享實例</td>\n<td>每個請求</td>\n</tr>\n<tr>\n<td><strong>Singleton</strong></td>\n<td>應用程式全域唯一實例</td>\n<td>應用啟動時</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"🧬-Singleton：單例生命週期\">🧬 Singleton：單例生命週期</h2>\n<h3 id=\"✅-適用情境：\">✅ 適用情境：</h3>\n<ul>\n<li>全域設定</li>\n<li>資料庫連線</li>\n<li>快取服務</li>\n<li>隨機數生成器、雜湊函式</li>\n</ul>\n<h3 id=\"🧠-使用方式：\">🧠 使用方式：</h3>\n<pre><code class=\"highlight C#\">services.AddSingleton&lt;IMyService, MyService&gt;();</code></pre>\n<h3 id=\"👍-優點：\">👍 優點：</h3>\n<ul>\n<li>只建立一次，效能佳、記憶體使用少</li>\n<li>適用於無狀態或全域狀態一致的服務</li>\n</ul>\n<h3 id=\"⚠️-注意事項\">⚠️ 注意事項 :</h3>\n<ul>\n<li>實例不能被替換</li>\n<li>不適用於每次請求需不同狀態的服務</li>\n</ul>\n<h2 id=\"📦-Scoped：作用域生命週期\">📦 Scoped：作用域生命週期</h2>\n<h3 id=\"✅-適用情境：-t2\">✅ 適用情境：</h3>\n<ul>\n<li>驗證與授權服務</li>\n<li>與 HTTP Request 綁定的服務（如使用者上下文）</li>\n</ul>\n<h3 id=\"🧠-使用方式：-t2\">🧠 使用方式：</h3>\n<pre><code class=\"highlight C#\">services.AddScoped&lt;IMyService, MyService&gt;();</code></pre>\n<h3 id=\"👍-優點：-t2\">👍 優點：</h3>\n<ul>\n<li>每個 HTTP Request 都會使用同一實例</li>\n<li>可安全操作與 Request 綁定的狀態</li>\n</ul>\n<h3 id=\"⚠️-注意事項-t2\">⚠️ 注意事項 :</h3>\n<ul>\n<li>效能可能略低於 Singleton</li>\n<li>避免跨作用域存取（例如注入到 Singleton 裡）</li>\n</ul>\n<h2 id=\"✨-Transient：瞬時生命週期\">✨ Transient：瞬時生命週期</h2>\n<h3 id=\"✅-適用情境：-t3\">✅ 適用情境：</h3>\n<ul>\n<li>每次都要獲得新資料的服務</li>\n<li>無需維持狀態的元件</li>\n</ul>\n<h3 id=\"🧠-使用方式：-t3\">🧠 使用方式：</h3>\n<pre><code class=\"highlight C#\">services.AddTransient&lt;IMyService, MyService&gt;();</code></pre>\n<h3 id=\"👍-優點：-t3\">👍 優點：</h3>\n<ul>\n<li>每次使用都會建立新實例，資料最新</li>\n<li>不會產生跨請求污染問題</li>\n</ul>\n<h3 id=\"⚠️-不建議用於\">⚠️ 不建議用於 :</h3>\n<ul>\n<li>資料庫連線、設定、快取等需要長時間共用資源的服務</li>\n</ul>\n<h2 id=\"💡-實例範例：比較三種生命週期\">💡 實例範例：比較三種生命週期</h2>\n<p><code>ISampleService.cs</code></p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ISampleService</span>\n&#123;\n    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">GetId</span>()</span>;\n&#125;</code></pre>\n<p><code>SampleService</code></p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleService</span> : <span class=\"title\">ISampleService</span>\n&#123;\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> _Id;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleService</span>()</span>\n    &#123;\n       _Id = Guid.NewGuid().ToString();\n    &#125;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetId</span>()</span>\n    &#123;\n        <span class=\"keyword\">return</span> _Id;\n    &#125;\n&#125;</code></pre>\n<p><code>SampleController.cs</code></p>\n<pre><code class=\"highlight C#\">[<span class=\"meta\">Route(<span class=\"string\">&quot;api/[controller]&quot;</span>)</span>]\n[<span class=\"meta\">ApiController</span>]\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleController</span> : <span class=\"title\">ControllerBase</span>\n&#123;\n    <span class=\"comment\">// 注入三種不同生命週期的服務</span>\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ISampleService _singletonService;\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ISampleService _scopedService;\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ISampleService _transientService;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleController</span>(<span class=\"params\">[FromServices] ISampleService singletonService,</span></span>\n<span class=\"params\"><span class=\"function\">                            [FromServices] ISampleService scopedService,</span></span>\n<span class=\"params\"><span class=\"function\">                            [FromServices] ISampleService transientService</span>)</span>\n    &#123;\n        <span class=\"comment\">// 賦值給私有字段</span>\n        _singletonService = singletonService;\n        _scopedService = scopedService;\n        _transientService = transientService;\n    &#125;\n\n    [<span class=\"meta\">HttpGet</span>]\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">Get</span>()</span>\n    &#123;\n        <span class=\"comment\">// 獲取服務的標識符</span>\n        <span class=\"keyword\">var</span> singletonId = _singletonService.GetId();\n        <span class=\"keyword\">var</span> scopedId = _scopedService.GetId();\n        <span class=\"keyword\">var</span> transientId = _transientService.GetId();\n\n        <span class=\"comment\">// 返回結果</span>\n        <span class=\"keyword\">return</span> Ok(<span class=\"keyword\">new</span>\n        &#123;\n            Singleton = singletonId,\n            Scoped = scopedId,\n            Transient = transientId\n        &#125;);\n    &#125;\n&#125;</code></pre>\n<p><code>回傳範例</code></p>\n<pre><code class=\"highlight json\"><span class=\"punctuation\">&#123;</span>\n  <span class=\"attr\">&quot;singleton&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c17f2227-53b6-4689-8c4a-79b7955a6ff9&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;scoped&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;e95824da-a8f1-4bdf-9d73-d1036290cc44&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;transient&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;98e79f60-a51c-4142-906e-756200e3f6fe&quot;</span>\n<span class=\"punctuation\">&#125;</span></code></pre>\n<h2 id=\"📚-參考及延伸\">📚 參考及延伸</h2>\n<p><a href=\"https://medium.com/@atailin.work/%E9%90%B5%E4%BA%BA%E8%B3%BD-asp-net-core-3-day04-%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5-dependency-injection-10cf9651b544\">鐵人賽 ASP.NET Core 3 Day04 依賴注入 (Dependency Injection)</a><br>\n<a href=\"https://marcus116.blogspot.com/2019/04/netcore-aspnet-core-di-lifetime.html\">ASP.NET Core DI 生命週期 LifeTime</a><br>\n<a href=\"https://hackmd.io/@rgnkud/ByL9DP5op\">依賴注入(DI)在容器中服務的生命週期</a></p>\n","categories":["後端"],"tags":["C#"]},{"title":"Dijkstra 演算法","url":"/2025/05/07/dijstra/","content":"<h2 id=\"🧠-簡述\">🧠 簡述</h2>\n<p>由荷蘭計算機科學家 Edsger W. Dijkstra 於 1956 年提出</p>\n<ul>\n<li>用來尋找單一源點到其他節點的最短路徑</li>\n<li>適用於加權圖(所以邊的權重為正)</li>\n<li>常用的資料結構 : 優先佇列(Priority Queue) 或 最小堆(Min-Heap)</li>\n</ul>\n<h2 id=\"🧭-步驟\">🧭 步驟</h2>\n<ol>\n<li>將所有節點分為兩組：已確定最短路徑（S）與未確定（U）</li>\n<li>初始時，起點在 S，其餘在 U，距離設為 ∞，起點設為 0</li>\n<li>從 U 中選擇目前與起點距離最短的節點加入 S</li>\n<li>更新該節點鄰接點的距離（鬆弛）</li>\n<li>重複步驟 3~4，直到所有節點都加入 S 或無法再更新</li>\n</ol>\n<h2 id=\"🧑‍💻-C-實作（含範例圖）\">🧑‍💻 C# 實作（含範例圖）</h2>\n<p><img src=\"/images/dijkstra/samplegraph.png\" alt=\"sampleGraph.png\"></p>\n<p>以下為對應圖形的 C# 程式實作</p>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span>\n&#123;\n    <span class=\"built_in\">int</span> n = <span class=\"number\">7</span>; <span class=\"comment\">// 節點數</span>\n    List&lt;Edge&gt;[] graph = <span class=\"keyword\">new</span> List&lt;Edge&gt;[n];\n    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) graph[i] = <span class=\"keyword\">new</span> List&lt;Edge&gt;();\n\n    <span class=\"comment\">// 建立圖的鄰接表（根據圖像）</span>\n    AddEdge(graph, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>);\n    AddEdge(graph, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>);\n    AddEdge(graph, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>);\n    AddEdge(graph, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>);\n    AddEdge(graph, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>);\n    AddEdge(graph, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span>);\n    AddEdge(graph, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);\n    AddEdge(graph, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>);\n    AddEdge(graph, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>);\n\n    <span class=\"built_in\">int</span> start = <span class=\"number\">0</span>;\n    <span class=\"built_in\">int</span>[] dist = Dijkstra(graph, start);\n\n    Console.WriteLine(<span class=\"string\">&quot;起點到各節點的最短距離&quot;</span>);\n    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)\n    &#123;\n        Console.WriteLine(<span class=\"string\">$&quot;到節點<span class=\"subst\">&#123;i&#125;</span>的最短距離 : <span class=\"subst\">&#123;dist[i]&#125;</span>&quot;</span>);\n    &#125;\n&#125;\n\n<span class=\"keyword\">class</span> <span class=\"title\">Edge</span>\n&#123;\n    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> To, Weight;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Edge</span>(<span class=\"params\"><span class=\"built_in\">int</span> to, <span class=\"built_in\">int</span> weight</span>)</span>\n    &#123;\n        To = to; Weight = weight;\n    &#125;\n&#125;\n\n<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">AddEdge</span>(<span class=\"params\">List&lt;Edge&gt;[] graph, <span class=\"built_in\">int</span> <span class=\"keyword\">from</span>, <span class=\"built_in\">int</span> to, <span class=\"built_in\">int</span> weight</span>)</span>\n&#123;\n    graph[<span class=\"keyword\">from</span>].Add(<span class=\"keyword\">new</span> Edge(to, weight));\n    graph[to].Add(<span class=\"keyword\">new</span> Edge(<span class=\"keyword\">from</span>, weight)); <span class=\"comment\">// 無向圖需要雙向邊</span>\n&#125;\n\n<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">int</span>[] <span class=\"title\">Dijkstra</span>(<span class=\"params\">List&lt;Edge&gt;[] graph, <span class=\"built_in\">int</span> start</span>)</span>\n&#123;\n    <span class=\"built_in\">int</span> n = graph.Length;\n    <span class=\"built_in\">int</span>[] dist = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[n];\n    <span class=\"built_in\">bool</span>[] visited = <span class=\"keyword\">new</span> <span class=\"built_in\">bool</span>[n];\n\n    <span class=\"comment\">// 初始化距離與訪問狀態</span>\n    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) dist[i] = <span class=\"built_in\">int</span>.MaxValue;\n    dist[start] = <span class=\"number\">0</span>;\n\n    <span class=\"comment\">// 使用NET6+ 的 PriorityQueue&lt;TElement, TPriority&gt;</span>\n    <span class=\"comment\">// 舊版要自己實作 MinHeap</span>\n    <span class=\"comment\">// 使用優先佇列處理節點，依距離最小優先處理</span>\n    <span class=\"keyword\">var</span> pq = <span class=\"keyword\">new</span> PriorityQueue&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>&gt;();\n    pq.Enqueue(start, <span class=\"number\">0</span>);\n\n    <span class=\"keyword\">while</span> (pq.Count &gt; <span class=\"number\">0</span>)\n    &#123;\n        <span class=\"built_in\">int</span> u = pq.Dequeue();\n\n        <span class=\"comment\">// 確認是否處理過節點，並更新註記</span>\n        <span class=\"keyword\">if</span> (visited[u]) <span class=\"keyword\">continue</span>;\n        visited[u] = <span class=\"literal\">true</span>;\n\n        <span class=\"comment\">// 遍歷所有相鄰邊</span>\n        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> edge <span class=\"keyword\">in</span> graph[u])\n        &#123;\n            <span class=\"built_in\">int</span> v = edge.To;\n            <span class=\"built_in\">int</span> weight = edge.Weight;\n\n           <span class=\"comment\">// 若從 u 到 v 的新距離更短，則更新 dist 並放入優先佇列</span>\n            <span class=\"keyword\">if</span> (dist[u] + weight &lt; dist[v])\n            &#123;\n                dist[v] = dist[u] + weight;\n                pq.Enqueue(v, dist[v]);\n            &#125;\n        &#125;\n    &#125;\n\n    <span class=\"keyword\">return</span> dist;\n&#125;</code></pre>\n<p>輸出結果</p>\n<pre><code class=\"highlight ada\">起點到各節點的最短距離\n到節點<span class=\"number\">0</span>的最短距離 : 0\n到節點<span class=\"number\">1</span>的最短距離 : 2\n到節點<span class=\"number\">2</span>的最短距離 : 6\n到節點<span class=\"number\">3</span>的最短距離 : 7\n到節點<span class=\"number\">4</span>的最短距離 : 17\n到節點<span class=\"number\">5</span>的最短距離 : 22\n到節點<span class=\"number\">6</span>的最短距離 : 19</code></pre>\n<h2 id=\"參考資料\">參考資料</h2>\n<ul>\n<li><a href=\"https://www.freecodecamp.org/chinese/news/dijkstras-shortest-path-algorithm-visual-introduction/\">https://www.freecodecamp.org/chinese/news/dijkstras-shortest-path-algorithm-visual-introduction/</a></li>\n<li><a href=\"https://medium.com/@amber.fragments/%E6%BC%94%E7%AE%97%E6%B3%95-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-14-dijkstra-algorithm-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%91%E6%BC%94%E7%AE%97%E6%B3%95-745983dd4332\">https://medium.com/@amber.fragments/演算法-學習筆記-14-dijkstra-algorithm-最短路徑演算法-745983dd4332</a></li>\n<li>chatgpt</li>\n</ul>\n","categories":["基礎"],"tags":["演算法"]},{"title":"Hello World","url":"/2024/11/19/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\">Quick Start</h2>\n<h3 id=\"Create-a-new-post\">Create a new post</h3>\n<pre><code class=\"highlight bash\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\">Run server</h3>\n<pre><code class=\"highlight bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\">Generate static files</h3>\n<pre><code class=\"highlight bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\">Deploy to remote sites</h3>\n<pre><code class=\"highlight bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"前端生成PDF","url":"/2025/04/25/htmlpdf/","content":"<h2 id=\"前言\">前言</h2>\n<p>因為業務需求的關係，需要將填寫的表單轉換成 PDF，進行資料儲存供後續使用<br>\n最便捷的方法為是使用前端套件<a href=\"https://html2canvas.hertzen.com/\">html2canvas</a>搭配<a href=\"https://github.com/parallax/jsPDF\">jspdf</a><br>\n利用<code>html2canvas</code>進行截圖，然後貼到<code>jspdf</code>產生的 PDF 檔<br>\n但最穩妥的方法建議是使用後端服務器去專門產生 PDF 比較合適(ex. <a href=\"https://wkhtmltopdf.org/\">wkhtmltopdf</a> 或是 <a href=\"https://pptr.dev/\">Puppeteer</a> )</p>\n<h2 id=\"Install\">Install</h2>\n<pre><code class=\"highlight cmake\">npm <span class=\"keyword\">install</span> html2canvas jspdf</code></pre>\n<h2 id=\"Usage\">Usage</h2>\n<p>pdfHelper.ts</p>\n<pre><code class=\"highlight ts\"><span class=\"keyword\">import</span> jsPDF <span class=\"keyword\">from</span> <span class=\"string\">&quot;jspdf&quot;</span>;\n<span class=\"keyword\">import</span> html2canvas <span class=\"keyword\">from</span> <span class=\"string\">&quot;html2canvas&quot;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">generatePDF</span> = <span class=\"keyword\">async</span> (<span class=\"params\"><span class=\"attr\">id</span>: <span class=\"built_in\">string</span></span>) =&gt; &#123;\n  <span class=\"keyword\">try</span> &#123;\n    <span class=\"comment\">// 取得要擷取的部分</span>\n    <span class=\"keyword\">const</span> el = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(id) <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span>;\n    <span class=\"keyword\">if</span> (!el) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;\n\n    <span class=\"comment\">// 截圖</span>\n    <span class=\"keyword\">const</span> canvas = <span class=\"keyword\">await</span> <span class=\"title function_\">html2canvas</span>(el, &#123;\n      <span class=\"attr\">useCORS</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 允許跨域圖片</span>\n      <span class=\"attr\">scale</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 提高清晰度</span>\n    &#125;);\n\n    <span class=\"comment\">// 轉換圖片</span>\n    <span class=\"comment\">// toDataURL(&#123;轉換格式&#125;, &#123;品質&#125;)</span>\n    <span class=\"keyword\">const</span> imgData = canvas.<span class=\"title function_\">toDataURL</span>(<span class=\"string\">&quot;image/jpeg&quot;</span>, <span class=\"number\">0.7</span>);\n\n    <span class=\"comment\">// 創建PDF文檔</span>\n    <span class=\"keyword\">const</span> pdf = <span class=\"keyword\">new</span> <span class=\"title function_\">jsPDF</span>(&#123;\n      <span class=\"attr\">orientation</span>: <span class=\"string\">&quot;portrait&quot;</span>, <span class=\"comment\">// 頁面方向</span>\n      <span class=\"attr\">unit</span>: <span class=\"string\">&quot;pt&quot;</span>, <span class=\"comment\">// 單位</span>\n      <span class=\"attr\">format</span>: <span class=\"string\">&quot;a4&quot;</span>, <span class=\"comment\">// 紙張大小</span>\n    &#125;);\n\n    <span class=\"comment\">// 取得PDF尺寸</span>\n    <span class=\"keyword\">const</span> pageWidth = pdf.<span class=\"property\">internal</span>.<span class=\"property\">pageSize</span>.<span class=\"title function_\">getWidth</span>();\n    <span class=\"keyword\">const</span> pageHeight = pdf.<span class=\"property\">internal</span>.<span class=\"property\">pageSize</span>.<span class=\"title function_\">getHeight</span>();\n\n    <span class=\"comment\">// 調整為A4寬度且維持原本寬高比</span>\n    <span class=\"keyword\">const</span> imgWidth = pageWidth;\n    <span class=\"keyword\">const</span> imgHeight = (canvas.<span class=\"property\">height</span> * imgWidth) / canvas.<span class=\"property\">width</span>;\n\n    <span class=\"comment\">// 若圖像高度超出頁面高度，則縮小</span>\n    <span class=\"keyword\">const</span> finalHeight = imgHeight &gt; pageHeight ? pageHeight : imgHeight;\n    <span class=\"keyword\">const</span> finalWidth = (canvas.<span class=\"property\">width</span> * finalHeight) / canvas.<span class=\"property\">height</span>;\n\n    <span class=\"comment\">// 可選：讓圖片置中</span>\n    <span class=\"keyword\">const</span> marginX = (pageWidth - finalWidth) / <span class=\"number\">2</span>;\n    <span class=\"keyword\">const</span> marginY = (pageHeight - finalHeight) / <span class=\"number\">2</span>;\n\n    <span class=\"comment\">// 添加圖片到PDF</span>\n    pdf.<span class=\"title function_\">addImage</span>(\n      imgData, <span class=\"comment\">// 圖片資料</span>\n      <span class=\"string\">&quot;JPEG&quot;</span>, <span class=\"comment\">// 圖片格式</span>\n      marginX, <span class=\"comment\">// X座標</span>\n      marginY, <span class=\"comment\">// Y座標</span>\n      finalWidth, <span class=\"comment\">//圖片寬度</span>\n      finalHeight, <span class=\"comment\">//圖片高度</span>\n      <span class=\"literal\">undefined</span>, <span class=\"comment\">// 別名</span>\n      <span class=\"string\">&quot;FAST&quot;</span> <span class=\"comment\">// 壓縮方法</span>\n    );\n\n    <span class=\"comment\">// 取得包含 Base64 的 Data URL</span>\n    <span class=\"keyword\">const</span> pdfDataUrl = pdf.<span class=\"title function_\">output</span>(<span class=\"string\">&quot;datauristring&quot;</span>);\n\n    <span class=\"comment\">// Data URL 的格式通常是 &quot;data:application/pdf;base64,BASE64_STRING&quot;</span>\n    <span class=\"comment\">// 我們需要提取逗號後面的 Base64 部分</span>\n    <span class=\"keyword\">const</span> base64String = pdfDataUrl.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;,&quot;</span>)[<span class=\"number\">1</span>];\n\n    <span class=\"keyword\">return</span> base64String;\n  &#125; <span class=\"keyword\">catch</span> (e) &#123;\n    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);\n    <span class=\"keyword\">throw</span> e;\n  &#125;\n&#125;;</code></pre>\n<h2 id=\"參考資料\">參考資料</h2>\n<ul>\n<li><a href=\"https://html2canvas.hertzen.com/\">html2canvas</a></li>\n<li><a href=\"https://github.com/parallax/jsPDF\">jspdf</a></li>\n<li><a href=\"https://wkhtmltopdf.org/\">wkhtmltopdf</a></li>\n<li><a href=\"https://pptr.dev/\">Puppeteer</a></li>\n<li>ChatGpt</li>\n</ul>\n","categories":["前端"],"tags":["Vue"]},{"title":"簡單製作可互動圖片","url":"/2024/12/30/image-map/","content":"<h2 id=\"概述\">概述</h2>\n<p>在業務上需要對圖片進行互動操作去計算分數，簡單紀錄一下實作過程</p>\n<h3 id=\"Step1\">Step1</h3>\n<p>取得底圖，然後利用相關工具，將需要進行互動的區塊分出來<br>\n<img src=\"/images/image_split.png\" alt=\"image_split.png\"></p>\n<h3 id=\"Step2\">Step2</h3>\n<p>將互動區塊轉換成 svg，<a href=\"https://convertio.co/zh/png-svg/\">工具</a>轉換後格式應如下</p>\n<pre><code class=\"highlight svg\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.0&quot;</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/2000/svg&quot;</span></span>\n<span class=\"tag\"> <span class=\"attr\">width</span>=<span class=\"string\">&quot;373.000000pt&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;567.000000pt&quot;</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">&quot;0 0 373.000000 567.000000&quot;</span></span>\n<span class=\"tag\"> <span class=\"attr\">preserveAspectRatio</span>=<span class=\"string\">&quot;xMidYMid meet&quot;</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"name\">g</span> <span class=\"attr\">transform</span>=<span class=\"string\">&quot;translate(0.000000,567.000000) scale(0.100000,-0.100000)&quot;</span></span>\n<span class=\"tag\"><span class=\"attr\">fill</span>=<span class=\"string\">&quot;#000000&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;none&quot;</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M933 4763 c-28 -5 -78 -52 -87 -80 -20 -64 52 -155 108 -134 13 6 26</span></span>\n<span class=\"string\"><span class=\"tag\">7 29 4 11 -10 66 31 71 53 10 39 -5 112 -28 133 -23 22 -59 31 -93 24z&quot;</span>/&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M1213 4763 c-12 -2 -35 -16 -51 -31 -31 -30 -41 -88 -22 -137 11 -28</span></span>\n<span class=\"string\"><span class=\"tag\">67 -57 97 -51 61 11 86 29 101 68 32 84 -36 167 -125 151z&quot;</span>/&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M2628 4670 c-22 -6 -23 -10 -26 -123 l-3 -117 196 0 195 0 0 120 c0</span></span>\n<span class=\"string\"><span class=\"tag\">107 -2 120 -17 120 -137 4 -327 4 -345 0z&quot;</span>/&gt;</span>\n...\n<span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></code></pre>\n<p>其中 path 就是各個互動區塊</p>\n<h3 id=\"Step3\">Step3</h3>\n<p>設定 svg 底圖與區塊事件綁定(使用轉換出來的區塊 Path)<br>\n再根據需求微調 XY 軸 translate 跟縮放 scale 對齊底圖<br>\n以下為點擊區塊就會變色的簡易實作(Vue Typescript)</p>\n<pre><code class=\"highlight ts\">&lt;template&gt;\n  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;500&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;500&quot;</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span>\n<span class=\"language-xml\">    <span class=\"comment\">&lt;!-- 底圖 --&gt;</span></span>\n<span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;src/assets/images/bg.png&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;500&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;500&quot;</span> /&gt;</span></span>\n<span class=\"language-xml\"></span>\n<span class=\"language-xml\">    <span class=\"comment\">&lt;!-- 圖像互動區塊 --&gt;</span></span>\n<span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">g</span> <span class=\"attr\">transform</span>=<span class=\"string\">&quot;translate(55,528) scale(0.1,-0.1)&quot;</span>&gt;</span></span>\n<span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">path</span></span></span>\n<span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;region in wpi_regions&quot;</span></span></span>\n<span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">:key</span>=<span class=\"string\">&quot;region.id&quot;</span></span></span>\n<span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">:d</span>=<span class=\"string\">&quot;region.path&quot;</span></span></span>\n<span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">:fill</span>=<span class=\"string\">&quot;region.click ? &#x27;#F72C5B&#x27; : &#x27;#F4E0AF&#x27;&quot;</span></span></span>\n<span class=\"tag\"><span class=\"language-xml\">        @<span class=\"attr\">click</span>=<span class=\"string\">&quot;region.click = !region.click&quot;</span></span></span>\n<span class=\"tag\"><span class=\"language-xml\">      /&gt;</span></span>\n<span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></span>\n<span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span>\n&lt;/template&gt;\n\n<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">const</span> wpi_regions = <span class=\"title function_\">ref</span>([</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">    &#123;</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">id</span>: <span class=\"string\">&quot;01&quot;</span>,</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;右顳顎關節&quot;</span>,</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">click</span>: <span class=\"literal\">false</span>,</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">path</span>: <span class=\"string\">&quot;M933 4763 c-28 -5 -78 -52 -87 -80 -20 -64 52 -155 108 -134 13 6 26 7 29 4 11 -10 66 31 71 53 10 39 -5 112 -28 133 -23 22 -59 31 -93 24z&quot;</span>,</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">    &#123;</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">id</span>: <span class=\"string\">&quot;02&quot;</span>,</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;左顳顎關節&quot;</span>,</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">click</span>: <span class=\"literal\">false</span>,</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">path</span>: <span class=\"string\">&quot;M1213 4763 c-12 -2 -35 -16 -51 -31 -31 -30 -41 -88 -22 -137 11 -28 67 -57 97 -51 61 11 86 29 101 68 32 84 -36 167 -125 151z&quot;</span>,</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">    ...</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\">  ]);</span></span>\n<span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></code></pre>\n<h2 id=\"參考資料\">參考資料</h2>\n<ul>\n<li><a href=\"https://chatgpt.com/\">ChatGpt</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path\">https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path</a></li>\n</ul>\n","categories":["前端"],"tags":["Vue"]},{"title":"C# 資料快取","url":"/2024/11/20/imemorycahce/","content":"<h2 id=\"概述\">概述</h2>\n<p>有時候一些大型資料且異動少的資料<br>\n每次使用就要從資料重新撈取就很浪費效能資源<br>\n這個時候就是快取出場的時候</p>\n<h2 id=\"Install\">Install</h2>\n<pre><code class=\"highlight powershell\">dotnet add package Microsoft.Extensions.Caching.Memory</code></pre>\n<h2 id=\"Extensions-cs\">Extensions.cs</h2>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">AddExtension</span>(<span class=\"params\"><span class=\"keyword\">this</span> IServiceCollection services</span>)</span>\n&#123;\n    services.AddMemoryCache();\n    <span class=\"comment\">// services.AddScoped&lt;CacheHelper&gt;(); //如果有使用整合工具類</span>\n&#125;</code></pre>\n<h2 id=\"Usage\">Usage</h2>\n<pre><code class=\"highlight C#\">[<span class=\"meta\">Route(<span class=\"string\">&quot;api/[controller]&quot;</span>)</span>]\n [<span class=\"meta\">ApiController</span>]\n <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DataController</span> : <span class=\"title\">ControllerBase</span>\n &#123;\n     <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> DataBaseService dataBaseService;\n     <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMemoryCache memoryCache;\n\n     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DataController</span>(<span class=\"params\">DataBaseService dataBaseService, IMemoryCache memoryCache</span>)</span>\n     &#123;\n         <span class=\"keyword\">this</span>.memoryCache = memoryCache;\n         <span class=\"keyword\">this</span>.dataBaseService = dataBaseService;\n     &#125;\n\n     [<span class=\"meta\">HttpGet(<span class=\"string\">&quot;/search&quot;</span>)</span>]\n     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">Search</span>(<span class=\"params\"><span class=\"built_in\">string</span> keyword</span>)</span>\n     &#123;\n        <span class=\"comment\">// 從記憶體快取查看是否存在，沒再去資料庫撈資料並儲存快取</span>\n         <span class=\"keyword\">if</span> (memoryCache.TryGetValue(<span class=\"string\">&quot;MainDataCache&quot;</span>, <span class=\"keyword\">out</span> List&lt;Prs006&gt; dataList))\n         &#123;\n             <span class=\"keyword\">var</span> result = dataList?\n                 .Where(data =&gt; data.Ordnme?.Contains(keyword, StringComparison.OrdinalIgnoreCase) == <span class=\"literal\">true</span>\n                                || data.Scitn?.Contains(keyword, StringComparison.OrdinalIgnoreCase) == <span class=\"literal\">true</span>\n                                || data.Keyword?.Contains(keyword, StringComparison.OrdinalIgnoreCase) == <span class=\"literal\">true</span>)\n                 .ToList() ?? <span class=\"keyword\">new</span> List&lt;Prs006&gt;();\n\n             <span class=\"keyword\">return</span> Ok(result);\n         &#125;\n         <span class=\"keyword\">else</span>\n         &#123;\n             <span class=\"keyword\">var</span> dbData = <span class=\"keyword\">await</span> dataBaseService.GetDatas();\n             <span class=\"comment\">//寫入記憶體儲存，一天後自動過期</span>\n             memoryCache.Set(<span class=\"string\">&quot;MainDataCache&quot;</span>, dbData, TimeSpan.FromDays(<span class=\"number\">1</span>));\n\n             <span class=\"keyword\">var</span> result = dbData?\n                 .Where(data =&gt; data.Ordnme?.Contains(keyword, StringComparison.OrdinalIgnoreCase) == <span class=\"literal\">true</span>\n                                || data.Scitn?.Contains(keyword, StringComparison.OrdinalIgnoreCase) == <span class=\"literal\">true</span>\n                                || data.Keyword?.Contains(keyword, StringComparison.OrdinalIgnoreCase) == <span class=\"literal\">true</span>)\n                 .ToList() ?? <span class=\"keyword\">new</span> List&lt;Prs006&gt;();\n\n             <span class=\"keyword\">return</span> Ok(result);\n         &#125;\n     &#125;</code></pre>\n<h2 id=\"CacheHelper-cs-Optional\">CacheHelper.cs(Optional)</h2>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CacheHelper</span>\n&#123;\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMemoryCache cache;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CacheHelper</span>(<span class=\"params\">IMemoryCache cache</span>)</span>\n    &#123;\n        <span class=\"keyword\">this</span>.cache = cache;\n    &#125;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Set</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"built_in\">string</span> key, T <span class=\"keyword\">value</span>, <span class=\"built_in\">int</span> expire = <span class=\"number\">300</span></span>)</span>\n    &#123;\n        <span class=\"keyword\">var</span> options = <span class=\"keyword\">new</span> MemoryCacheEntryOptions\n        &#123;\n            AbsoluteExpirationRelativeToNow = TimeSpan.FromSeconds(expire),\n        &#125;;\n        cache.Set(key, <span class=\"keyword\">value</span>, options);\n    &#125;\n\n    <span class=\"keyword\">public</span> T? Get&lt;T&gt;(<span class=\"built_in\">string</span> key)\n    &#123;\n        cache.TryGetValue&lt;T&gt;(key, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> <span class=\"keyword\">value</span>);\n        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;\n    &#125;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Remove</span>(<span class=\"params\"><span class=\"built_in\">string</span> key</span>)</span>\n    &#123;\n        cache.Remove(key);\n    &#125;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Update</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"built_in\">string</span> key, T <span class=\"keyword\">value</span>, <span class=\"built_in\">int</span> expire</span>)</span>\n    &#123;\n        cache.Remove(key);\n        Set&lt;T&gt;(key, <span class=\"keyword\">value</span>, expire);\n    &#125;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">Contains</span>(<span class=\"params\"><span class=\"built_in\">string</span> key</span>)</span>\n    &#123;\n        <span class=\"keyword\">return</span> cache.TryGetValue(key, <span class=\"keyword\">out</span> _);\n    &#125;\n&#125;</code></pre>\n","categories":["後端"],"tags":["C#","Cache"]},{"title":"迭代與遞迴","url":"/2024/11/27/iteration-and-recursion/","content":"<p><code>迭代(iteration)</code>是一種重複執行任務的控制結構<br>\n在一定的<code>條件</code>下重複執行，直到<code>條件</code>不再滿足</p>\n<ul>\n<li>for<br>\n最常見的迭代形式</li>\n</ul>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">ForLoop</span>(<span class=\"params\"><span class=\"built_in\">int</span> n</span>)</span>\n&#123;\n    <span class=\"built_in\">int</span> result = <span class=\"number\">0</span>;\n    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i--)\n    &#123;\n        result += i;\n    &#125;\n    <span class=\"keyword\">return</span> result;\n&#125;</code></pre>\n<ul>\n<li>while<br>\nwhile 跟 for 類似，但是 while 會比較好控制條件的設定與變化<br>\nfor 的程式碼較簡潔、while 的迴圈控制較靈活</li>\n</ul>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">WhileLoop</span>(<span class=\"params\"><span class=\"built_in\">int</span> n</span>)</span>\n&#123;\n    <span class=\"built_in\">int</span> result = <span class=\"number\">0</span>;\n    <span class=\"built_in\">int</span> i = <span class=\"number\">1</span>; <span class=\"comment\">//初始條件</span>\n    <span class=\"keyword\">while</span> (i &lt;= n)\n    &#123;\n        result += i;\n        <span class=\"comment\">//更新條件</span>\n        i +=<span class=\"number\">1</span>;\n        i *=<span class=\"number\">2</span>;\n    &#125;\n    <span class=\"keyword\">return</span> result;\n&#125;</code></pre>\n<ul>\n<li>巢狀<br>\n迴圈包迴圈</li>\n</ul>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">NestForLoop</span>(<span class=\"params\"><span class=\"built_in\">int</span> n</span>)</span>\n&#123;\n    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> StringBuilder();\n    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)\n    &#123;\n        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)\n        &#123;\n            result.Append(<span class=\"string\">$&quot;(<span class=\"subst\">&#123;i&#125;</span>,<span class=\"subst\">&#123;j&#125;</span>)&quot;</span>);\n        &#125;\n    &#125;\n    <span class=\"keyword\">return</span> result.ToString();\n&#125;</code></pre>\n<h2 id=\"遞迴\">遞迴</h2>\n<p><code>遞迴(recursion)</code>函式呼叫自己本身<br>\n<strong>主要三要素</strong></p>\n<ol>\n<li>終止條件 : 什麼時候結束往下層傳遞</li>\n<li>遞迴呼叫 : 將參數往下層傳遞給自己</li>\n<li>結果返回 : 回傳結果給上層</li>\n</ol>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">Recur</span>(<span class=\"params\"><span class=\"built_in\">int</span> n</span>)</span>\n&#123;\n    <span class=\"comment\">// 終止條件</span>\n    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\n    <span class=\"comment\">// 遞迴呼叫</span>\n    <span class=\"built_in\">int</span> res = Recur(n - <span class=\"number\">1</span>);\n    <span class=\"comment\">// 返回結果</span>\n    <span class=\"keyword\">return</span> n + res;\n&#125;</code></pre>\n<p><img src=\"/images/recursion_sum_depth.png\" alt=\"recursion_sum_depth.png\"></p>\n<p>由於遞迴每次都要呼叫重新產生本身函式，會有額外的資源開銷<br>\n所以遞迴的次數是有限的，太多記憶體會爆炸，效率也會比迭代來的低</p>\n<h2 id=\"比較\">比較</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>迭代</th>\n<th>遞迴</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>效率</td>\n<td>較高，沒有函式產生開銷</td>\n<td>每次遞迴呼叫都有產生開銷</td>\n</tr>\n<tr>\n<td>記憶體</td>\n<td>通常固定大小</td>\n<td>根據遞迴函式產生占用大量記憶體</td>\n</tr>\n<tr>\n<td>適用</td>\n<td>簡單任務、直觀、可讀佳</td>\n<td>複雜任務分解(樹、圖、分治、回溯等)、結構明確</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"參考資料\">參考資料</h2>\n<ul>\n<li><a href=\"https://www.hello-algo.com/zh-hant/chapter_computational_complexity/iteration_and_recursion/\">https://www.hello-algo.com/zh-hant/chapter_computational_complexity/iteration_and_recursion/</a></li>\n<li><a href=\"https://hackmd.io/@PythonTutor/By9P6avKd#%E9%81%9E%E8%BF%B4VS%E8%BF%AD%E4%BB%A3-%E5%8F%AF%E8%AE%80%E6%80%A7%E8%88%87%E5%8F%AF%E6%94%B9%E6%80%A7\">https://hackmd.io/@PythonTutor/By9P6avKd#遞迴VS迭代-可讀性與可改性</a></li>\n</ul>\n","categories":["基礎"],"tags":["迭代"]},{"title":"LINQ","url":"/2024/12/11/linq-search/","content":"<h3 id=\"LINQ-Language-Integrated-Query\">LINQ ( Language Integrated Query)</h3>\n<p>微軟開發的技術<code>具有查詢資料的程式語言</code><br>\n讓工程師能夠使用原生 C#對資料進行處理<br>\n且相同語法可以查詢不同類型的資料，降低學習成本<br>\n擴充類型 :</p>\n<ul>\n<li>LINQ to Objects</li>\n<li>LINQ to SQL</li>\n<li>LINQ to XML</li>\n<li>…etc</li>\n</ul>\n<h2 id=\"LINQ-查詢的兩種語法\">LINQ 查詢的兩種語法</h2>\n<ol>\n<li>查詢表達式 ( Query Expression Syntax )</li>\n</ol>\n<ul>\n<li>類似 SQL 的語法 : 使用 select 、 from 、where 等關鍵字</li>\n<li>較容易理解</li>\n<li>結構固定 : 必須 from 起始，select 或 group by 結尾</li>\n</ul>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span>\n&#123;\n    <span class=\"comment\">// Data source.</span>\n    <span class=\"built_in\">int</span>[] scores = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[] &#123; <span class=\"number\">90</span>, <span class=\"number\">71</span>, <span class=\"number\">82</span>, <span class=\"number\">93</span>, <span class=\"number\">75</span>, <span class=\"number\">82</span> &#125;;\n\n    <span class=\"comment\">// Query Expression.</span>\n    IEnumerable&lt;<span class=\"built_in\">int</span>&gt; scoreQuery = <span class=\"comment\">//query variable</span>\n        <span class=\"keyword\">from</span> score <span class=\"keyword\">in</span> scores <span class=\"comment\">//required</span>\n        <span class=\"keyword\">where</span> score &gt; <span class=\"number\">80</span> <span class=\"comment\">// optional</span>\n        <span class=\"keyword\">orderby</span> score <span class=\"keyword\">descending</span> <span class=\"comment\">// optional</span>\n        <span class=\"keyword\">select</span> score; <span class=\"comment\">//must end with select or group</span>\n\n    <span class=\"comment\">// Execute the query to produce the results</span>\n    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> testScore <span class=\"keyword\">in</span> scoreQuery)\n    &#123;\n        Console.WriteLine(testScore);\n    &#125;\n\n    <span class=\"comment\">// Output: 93 90 82 82</span>\n&#125;</code></pre>\n<ol start=\"2\">\n<li>流利語法（Fluent Syntax）</li>\n</ol>\n<ul>\n<li>靈活性高 : 可以方便地鏈結調用多個方法</li>\n<li>Lambda 表達式 : 代碼簡潔</li>\n<li>沒有固定結構 : 沒有特定的開始或結束語句</li>\n</ul>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span>\n&#123;\n    <span class=\"comment\">// Data source.</span>\n    <span class=\"built_in\">int</span>[] scores = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[] &#123; <span class=\"number\">90</span>, <span class=\"number\">71</span>, <span class=\"number\">82</span>, <span class=\"number\">93</span>, <span class=\"number\">75</span>, <span class=\"number\">82</span> &#125;;\n\n    <span class=\"comment\">// Query Expression.</span>\n    <span class=\"keyword\">var</span> scoreQuery = scores\n        .Where(score =&gt; score &gt; <span class=\"number\">80</span>)\n        .OrderByDescending(score =&gt; score);\n\n    <span class=\"comment\">// Execute the query to produce the results</span>\n    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> testScore <span class=\"keyword\">in</span> scoreQuery)\n    &#123;\n        Console.WriteLine(testScore);\n    &#125;\n\n    <span class=\"comment\">// Output: 93 90 82 82</span>\n&#125;</code></pre>\n<table>\n<thead>\n<tr>\n<th>特徵</th>\n<th>查詢表達式</th>\n<th>流利語法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>風格</td>\n<td>類似 sql</td>\n<td>方法鏈結</td>\n</tr>\n<tr>\n<td>可讀性</td>\n<td>高</td>\n<td>中</td>\n</tr>\n<tr>\n<td>結構要求</td>\n<td>from 開頭、select 或 group by 結尾</td>\n<td>無特定要求</td>\n</tr>\n<tr>\n<td>靈活性</td>\n<td>某些情況下較低</td>\n<td>更高的靈活性，尤其是動態</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"參考資料\">參考資料</h3>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/zh-tw/%E8%AF%AD%E8%A8%80%E9%9B%86%E6%88%90%E6%9F%A5%E8%AF%A2\">https://zh.wikipedia.org/zh-tw/语言集成查询</a></li>\n<li><a href=\"https://www.perplexity.ai/\">https://www.perplexity.ai/</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10194251\">https://ithelp.ithome.com.tw/articles/10194251</a></li>\n</ul>\n","categories":["後端"],"tags":["C#","linq"]},{"title":"系統架構","url":"/2025/02/13/linuxSysArc/","content":"<h2 id=\"BIOS\">BIOS</h2>\n<h3 id=\"基本輸入輸出系統-Basic-Input-Output-System\">基本輸入輸出系統(Basic Input/Output System)</h3>\n<p>主要作用為<code>將系統硬體帶到可以準備交給作業系統的狀態</code>，通常包含下列步驟:</p>\n<ul>\n<li>系統初始化</li>\n<li>測試記憶體與其他周邊</li>\n<li>檢測儲存裝置</li>\n<li>在數個儲存裝置之間找出作業系統的起始點</li>\n</ul>\n<p>且提供操作介面，供使用者設定系統的低階參數、選擇開機裝置、配置系統資源等等。</p>\n<h3 id=\"日期與時間\">日期與時間</h3>\n<p>BIOS 的主要功能之一是<code>管理主機板內建的硬體時鐘</code>。<br>\n<code>作業系統本身也有設定硬體時鐘的能力</code>，可以依靠精準的外部較時參考來源(ex: NTPD 伺服器)來保持硬體時鐘的精準。</p>\n<h3 id=\"磁碟與開機裝置\">磁碟與開機裝置</h3>\n<p>BIOS 設定工具中其中一項重要功能就是<code>開機裝置的選擇</code>。<br>\n大多數 PC 至少支援三種開機媒體</p>\n<ul>\n<li>內接式硬碟(IDE 或 SCSI 或 SATA，或三者皆是)</li>\n<li>光碟機(同上)</li>\n<li>軟碟機</li>\n</ul>\n<h3 id=\"運用-proc-檔案系統\">運用/proc 檔案系統</h3>\n<p>/proc 檔案系統 (核心的運作狀態庫)目錄下的 interrupts、dma、ioports 三個檔案，提供目前系統資源的使用狀況</p>\n<pre><code class=\"highlight bash\"><span class=\"built_in\">cat</span> /proc/interrupts</code></pre>\n<p><img src=\"/images/linuxSysArc/proc_interrupts.png\" alt=\"interrupts.png\"></p>\n<pre><code class=\"highlight bash\"><span class=\"built_in\">cat</span> /proc/dma</code></pre>\n<p><img src=\"/images/linuxSysArc/proc_dma.png\" alt=\"interrupts.png\"></p>\n<pre><code class=\"highlight bash\"><span class=\"built_in\">cat</span> /proc/ioports</code></pre>\n<p><img src=\"/images/linuxSysArc/proc_ioports.png\" alt=\"interrupts.png\"></p>\n<h2 id=\"USB\">USB</h2>\n<h3 id=\"USB-拓樸邏輯\">USB 拓樸邏輯</h3>\n<p>電腦主機與 USB 裝置之間，是透過<code>集線器(HUB)</code>連接一起，構成一個樹狀結構。<br>\n使用<code>lsusb</code>指令可顯示 Linux 系統上所有 USB 裝置的實際連接方式。</p>\n<p><img src=\"/images/linuxSysArc/lsusb.png\" alt=\"lsusb.png\"></p>\n<h3 id=\"USB-控制器\">USB 控制器</h3>\n<p>主要分成 4 種類型</p>\n<ul>\n<li>開放型主控界面 ( Open Host Controller Interface , OHCI )</li>\n<li>通用型主控界面 ( Universal Host Controller Interface , UJCI )</li>\n<li>強化型主控界面 ( Enhanced Host Controller Interface , EHCI )</li>\n<li>擴充型主控界面 ( eXtented Host Controller Interface , xHCI )</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>規格</th>\n<th>控制器</th>\n<th>傳輸速率</th>\n<th>向下相容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>USB1.1</td>\n<td>OHCI、UHCI</td>\n<td>12Mbps</td>\n<td>否</td>\n</tr>\n<tr>\n<td>USB2.0</td>\n<td>EHCI</td>\n<td>480Mbps</td>\n<td>否</td>\n</tr>\n<tr>\n<td>USB3.0</td>\n<td>xHCI</td>\n<td>5Gbps</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"USB-裝置\">USB 裝置</h3>\n<ul>\n<li>人機界面裝置 ( Human Interface Device , HID)<br>\n輸入裝置 (滑鼠、鍵盤…等等)</li>\n<li>通訊裝置<br>\n數據機</li>\n<li>大量儲存裝置<br>\n磁碟機、讀卡機…等</li>\n<li>音訊<br>\n揚聲器、音效裝置</li>\n<li>IrDA<br>\n紅外線裝置</li>\n<li>印表機<br>\n印表機以及 USB-to-parallel 轉換器</li>\n</ul>\n<h3 id=\"USB-驅動程式\">USB 驅動程式</h3>\n<p><code>Linux 核心 2.0.x 以及更早版本，不支援 USB</code></p>\n<p>主要分成三大類</p>\n<ol>\n<li>主控器驅動程式</li>\n<li>通類驅動程式</li>\n<li>雜項裝置驅動程式</li>\n</ol>\n<h3 id=\"USB-熱插拔\">USB 熱插拔</h3>\n<p>模組化的 USB 驅動程式，是藉由核心對於/sbin/hotplug 的通用支援機制來載入</p>\n<h2 id=\"參考資料\">參考資料</h2>\n<ul>\n<li><a href=\"https://www.books.com.tw/products/0010517791?srsltid=AfmBOoqFrQZp9GsdBk5fTNGzq01OkJ2O4TBNwF0sK7VWkoij1MlNaG1X\">LPI Linux 第一級資格檢定 第三版</a></li>\n</ul>\n","categories":["基礎"],"tags":["linux"]},{"title":"C# Web api使用Quartz進行一次性排程","url":"/2024/11/19/quartz/","content":"<h2 id=\"Install\">Install</h2>\n<pre><code class=\"highlight powershell\"><span class=\"built_in\">Install-Package</span> Quartz.AspNetCore\n<span class=\"built_in\">Install-Package</span> Quartz.Extensions.DependencyInjection\n<span class=\"built_in\">Install-Package</span> Quartz.Serialization.Json</code></pre>\n<h2 id=\"appsetting-json\">appsetting.json</h2>\n<p>這邊使用 Oracle 資料庫做為持久化儲存<a href=\"https://github.com/quartznet/quartznet/tree/main/database/tables\">各類資料庫腳本</a></p>\n<pre><code class=\"highlight json\"><span class=\"attr\">&quot;Quartz&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>\n  <span class=\"attr\">&quot;quartz.scheduler.instanceName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;QuartzOracleScheduler&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.scheduler.instanceId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;AUTO&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.jobStore.type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Quartz.Impl.AdoJobStore.JobStoreTX, Quartz&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.jobStore.useProperties&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;true&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.jobStore.dataSource&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;default&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.jobStore.tablePrefix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;QRTZ_&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.jobStore.driverDelegateType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Quartz.Impl.AdoJobStore.OracleDelegate, Quartz&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.dataSource.default.provider&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;OracleODPManaged&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.dataSource.default.connectionString&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Your Connection String&quot;</span>\n<span class=\"punctuation\">&#125;</span></code></pre>\n<h2 id=\"Job-cs\">Job.cs</h2>\n<pre><code class=\"highlight C#\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SendTasJob</span> : <span class=\"title\">IJob</span>\n &#123;\n     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Execute</span>(<span class=\"params\">IJobExecutionContext context</span>)</span>\n     &#123;\n         <span class=\"comment\">//Job要實作的內容</span>\n          <span class=\"keyword\">var</span> tasid = context.MergedJobDataMap.GetString(<span class=\"string\">&quot;tasid&quot;</span>);\n          <span class=\"keyword\">var</span> welcomeText = context.MergedJobDataMap.GetString(<span class=\"string\">&quot;welcomeText&quot;</span>);\n          Console.WriteLine(tasid + welcomeText);\n          <span class=\"keyword\">return</span> Task.CompletedTask;\n     &#125;\n&#125;</code></pre>\n<h2 id=\"Controller-cs\">Controller.cs</h2>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TasController</span> : <span class=\"title\">ControllerBase</span>\n&#123;\n\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ISchedulerFactory schedulerFactory;\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IdGenerator idGenerator;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TasController</span>(<span class=\"params\">ISchedulerFactory schedulerFactory,</span></span>\n<span class=\"params\"><span class=\"function\">                         IdGenerator idGenerator</span>)</span>\n    &#123;\n        <span class=\"keyword\">this</span>.schedulerFactory = schedulerFactory;\n        <span class=\"keyword\">this</span>.idGenerator = idGenerator;\n    &#125;\n\n    [<span class=\"meta\">HttpPost(<span class=\"string\">&quot;[action]&quot;</span>)</span>]\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">ScheduleTasJob</span>(<span class=\"params\">TasJobRequest request</span>)</span>\n    &#123;\n        <span class=\"comment\">// 使用 SchedulerFactory 取得 Scheduler</span>\n        <span class=\"keyword\">var</span> sch = <span class=\"keyword\">await</span> schedulerFactory.GetScheduler();\n       <span class=\"comment\">// 雪花算法產Id</span>\n        <span class=\"keyword\">var</span> jobid = idGenerator.CreateId();\n        <span class=\"keyword\">var</span> jobKey = <span class=\"keyword\">new</span> JobKey(<span class=\"string\">$&quot;TasJob-<span class=\"subst\">&#123;jobid&#125;</span>&quot;</span>, <span class=\"string\">&quot;TasJobs&quot;</span>);\n        <span class=\"keyword\">var</span> triggerKey = <span class=\"keyword\">new</span> TriggerKey(<span class=\"string\">$&quot;TasJobTrigger-<span class=\"subst\">&#123;jobid&#125;</span>&quot;</span>, <span class=\"string\">&quot;TasJobs&quot;</span>);\n\n        <span class=\"comment\">// 建立Job</span>\n        <span class=\"keyword\">var</span> job = JobBuilder.Create&lt;SendTasJob&gt;()\n            .WithIdentity(jobKey)\n             <span class=\"comment\">//key value 如果有開啟UseProperties 只能有string型別</span>\n            .UsingJobData(<span class=\"string\">&quot;tasid&quot;</span>, request.TasId)\n            .UsingJobData(<span class=\"string\">&quot;welcomeText&quot;</span>, request.WelcomeText)\n            .StoreDurably() <span class=\"comment\">// 使任務持久化</span>\n            .Build();\n\n        <span class=\"comment\">// 設定Trigger</span>\n        ITrigger trigger = TriggerBuilder.Create()\n            .WithIdentity(triggerKey)\n            .StartAt(request.ExecuteAt ?? DateTime.UtcNow) <span class=\"comment\">// 指定執行時間</span>\n            .WithSimpleSchedule(x =&gt; x\n                .WithMisfireHandlingInstructionFireNow() <span class=\"comment\">// 當排程錯過執行時間時立即執行</span>\n                .WithRepeatCount(<span class=\"number\">0</span>) <span class=\"comment\">//只執行一次</span>\n                )\n            .Build();\n\n        <span class=\"keyword\">try</span>\n        &#123;\n           <span class=\"keyword\">await</span> sch.ScheduleJob(job, trigger);\n           Console.WriteLine(<span class=\"string\">$&quot;Scheduled job successfully with JobKey: <span class=\"subst\">&#123;jobKey.Name&#125;</span> and TriggerKey: <span class=\"subst\">&#123;triggerKey.Name&#125;</span>&quot;</span>);\n        &#125;\n        <span class=\"keyword\">catch</span> (Exception ex)\n        &#123;\n            Console.WriteLine(<span class=\"string\">$&quot;Failed to schedule job with JobKey: <span class=\"subst\">&#123;jobKey.Name&#125;</span> and TriggerKey: <span class=\"subst\">&#123;triggerKey.Name&#125;</span>&quot;</span>, ex);\n            <span class=\"keyword\">return</span> StatusCode(<span class=\"number\">500</span>, <span class=\"string\">&quot;Failed to schedule job&quot;</span>);\n        &#125;\n\n        <span class=\"keyword\">return</span> Ok(<span class=\"string\">$&quot;Scheduled job successfully with Job: <span class=\"subst\">&#123;jobKey.Name&#125;</span> and Trigger: <span class=\"subst\">&#123;triggerKey.Name&#125;</span>&quot;</span>);\n    &#125;\n&#125;</code></pre>\n<h2 id=\"Program-cs\">Program.cs</h2>\n<pre><code class=\"highlight C#\"><span class=\"comment\">// 從 appsettings.json 載入 Quartz 配置</span>\nbuilder.Services.Configure&lt;QuartzOptions&gt;(builder.Configuration.GetSection(<span class=\"string\">&quot;Quartz&quot;</span>));\n\n<span class=\"comment\">// 加入 Quartz 服務</span>\nbuilder.Services.AddQuartz(q =&gt;\n&#123;\n    q.UseJobFactory&lt;MicrosoftDependencyInjectionJobFactory&gt;();\n\n    <span class=\"comment\">// 持久化</span>\n    q.UsePersistentStore(opt =&gt;\n    &#123;\n        opt.UseProperties = <span class=\"literal\">false</span>;\n        opt.UseOracle(configuration =&gt;\n        &#123;\n            configuration.ConnectionString = builder.Configuration[<span class=\"string\">&quot;Quartz:quartz.dataSource.default.connectionString&quot;</span>];\n        &#125;);\n        opt.UseNewtonsoftJsonSerializer();\n    &#125;);\n&#125;);\nbuilder.Services.AddQuartzServer(q =&gt; q.WaitForJobsToComplete = <span class=\"literal\">true</span>); <span class=\"comment\">//hosting server</span>\n<span class=\"comment\">//builder.Services.AddQuartzHostedService(options =&gt;</span>\n<span class=\"comment\">//&#123;</span>\n<span class=\"comment\">//    // when shutting down we want jobs to complete gracefully</span>\n<span class=\"comment\">//    options.WaitForJobsToComplete = true;</span>\n<span class=\"comment\">//&#125;);</span>\nbuilder.Services.AddTransient&lt;SendTasJob&gt;(); <span class=\"comment\">// Job註冊</span>\n</code></pre>\n<h2 id=\"AddQuartzServer-vs-AddQuartzHostedService\">AddQuartzServer vs AddQuartzHostedService</h2>\n<p>AddQuartzServer 會多一個 Health Check 檢查 scheduler<br>\nSource Code 如下</p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">using</span> System;\n\n<span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;\n\n<span class=\"meta\">#<span class=\"keyword\">if</span> SUPPORTS_HEALTH_CHECKS</span>\n<span class=\"keyword\">using</span> Quartz.AspNetCore.HealthChecks;\n<span class=\"meta\">#<span class=\"keyword\">endif</span></span>\n\n<span class=\"keyword\">namespace</span> <span class=\"title\">Quartz</span>\n&#123;\n    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">QuartzServiceCollectionExtensions</span>\n    &#123;\n        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IServiceCollection <span class=\"title\">AddQuartzServer</span>(<span class=\"params\"></span></span>\n<span class=\"params\"><span class=\"function\">            <span class=\"keyword\">this</span> IServiceCollection services,</span></span>\n<span class=\"params\"><span class=\"function\">            Action&lt;QuartzHostedServiceOptions&gt;? configure = <span class=\"literal\">null</span></span>)</span>\n        &#123;\n            <span class=\"meta\">#<span class=\"keyword\">if</span> SUPPORTS_HEALTH_CHECKS</span>\n            services\n                .AddHealthChecks()\n                .AddTypeActivatedCheck&lt;QuartzHealthCheck&gt;(<span class=\"string\">&quot;quartz-scheduler&quot;</span>);\n            <span class=\"meta\">#<span class=\"keyword\">endif</span></span>\n\n            <span class=\"keyword\">return</span> services.AddQuartzHostedService(configure);\n        &#125;\n    &#125;\n&#125;</code></pre>\n<h2 id=\"IIS-回收機制，排程失效\">IIS 回收機制，排程失效</h2>\n<ul>\n<li>關閉回收機制(程式應用集區 =&gt; 進階設定)<br>\n<img src=\"/images/InetMgr_ndjANFedAK.png\" alt=\"InetMgr_ndjANFedAK.png\"><br>\n<img src=\"/images/InetMgr_8EXFtPapjN.png\" alt=\"InetMgr_8EXFtPapjN.png\"></li>\n<li>定期呼叫 api 維持 server keep alive (ex.使用 window 排程)</li>\n</ul>\n<pre><code class=\"highlight powershell\"><span class=\"comment\"># File: InvokeApi.ps1</span>\n\n<span class=\"comment\"># 設定 URL</span>\n<span class=\"variable\">$url</span> = <span class=\"string\">&quot;your api url&quot;</span>\n<span class=\"comment\"># 設定 Log Path</span>\n<span class=\"variable\">$logFile</span> = <span class=\"string\">&quot;C:\\Scripts\\InvokeApi.log&quot;</span>\n\n<span class=\"comment\"># 調用 API</span>\n<span class=\"keyword\">try</span> &#123;\n    <span class=\"variable\">$response</span> = <span class=\"built_in\">Invoke-WebRequest</span> <span class=\"literal\">-Uri</span> <span class=\"variable\">$url</span> <span class=\"literal\">-Method</span> Get <span class=\"literal\">-TimeoutSec</span> <span class=\"number\">10</span>\n    <span class=\"variable\">$logEntry</span> = <span class=\"string\">&quot;<span class=\"variable\">$</span>(Get-Date) - API call successfully: <span class=\"variable\">$</span>(<span class=\"variable\">$response</span>.StatusCode)&quot;</span>\n&#125; <span class=\"keyword\">catch</span> &#123;\n    <span class=\"variable\">$logEntry</span> = <span class=\"string\">&quot;<span class=\"variable\">$</span>(Get-Date) - API call failed: <span class=\"variable\">$</span>(<span class=\"variable\">$_</span>.Exception.Message)&quot;</span>\n&#125;\n\n<span class=\"comment\"># 寫入日誌</span>\n<span class=\"variable\">$logEntry</span> | <span class=\"built_in\">Out-File</span> <span class=\"literal\">-FilePath</span> <span class=\"variable\">$logFile</span> <span class=\"literal\">-Append</span>\n</code></pre>\n<ul>\n<li>回收後，應用關閉事件添加應用重啟<br>\n<img src=\"/images/aplstart.png\" alt=\"aplstart.png\"></li>\n</ul>\n<h2 id=\"參考資料\">參考資料</h2>\n<p><a href=\"https://www.quartz-scheduler.net/\">https://www.quartz-scheduler.net/</a><br>\n<a href=\"https://stackoverflow.com/questions/75443765/quartz-aspnetcore-and-hosting-in-asp-net-core\">https://stackoverflow.com/questions/75443765/quartz-aspnetcore-and-hosting-in-asp-net-core</a><br>\n<a href=\"https://blog.csdn.net/qq_18932003/article/details/139672249\">https://blog.csdn.net/qq_18932003/article/details/139672249</a></p>\n","categories":["後端"],"tags":["C#","Quartz"]},{"title":"SignalR","url":"/2024/12/11/signalr/","content":"<h3 id=\"概述\">概述</h3>\n<p>簡單利用 SignalR 去時做一個簡易的 Webhook Api</p>\n<h3 id=\"Installed\">Installed</h3>\n<pre><code class=\"highlight ada\">dotnet add <span class=\"keyword\">package</span> <span class=\"title\">Microsoft.AspNet.SignalR.Core</span></code></pre>\n<h3 id=\"Program-cs\">Program.cs</h3>\n<p>註冊 SignalR 服務，且設定路由</p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span>\n&#123;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span>\n    &#123;\n        <span class=\"keyword\">var</span> builder = WebApplication.CreateBuilder(args);\n        <span class=\"comment\">// Add services to the container.</span>\n        builder.Services.AddSignalR();   <span class=\"comment\">// 註冊 SignalR 服務</span>\n        <span class=\"comment\">//....</span>\n        <span class=\"keyword\">var</span> app = builder.Build();\n        app.UseHttpsRedirection();\n        app.UseAuthorization();\n        app.MapControllers();\n        app.MapHub&lt;MessageHub&gt;(<span class=\"string\">&quot;/hub&quot;</span>); <span class=\"comment\">//SignalR路由</span>\n        app.Run();\n    &#125;\n&#125;</code></pre>\n<h3 id=\"MessageHub-cs\">MessageHub.cs</h3>\n<p>實作 Hub 類別<br>\n這邊使用單一使用者群組做簡單的連線管理<br>\n因為是暫存在記憶體，關閉後資料就消失ㄌ<br>\n如果需要持久化，要再配合 DB 去進行持久化</p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MessageHub</span> : <span class=\"title\">Hub</span>\n&#123;\n    <span class=\"comment\">// 紀錄用戶的連線(單一使用者群組)</span>\n    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Dictionary&lt;<span class=\"built_in\">string</span>, List&lt;<span class=\"built_in\">string</span>&gt;&gt; _userConnections = <span class=\"keyword\">new</span>();\n\n    <span class=\"comment\">// 連線時要做的事</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnConnectedAsync</span>()</span>\n    &#123;\n        <span class=\"keyword\">var</span> userName = Context.GetHttpContext()?.Request.Query[<span class=\"string\">&quot;user&quot;</span>]\n          ?? <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"string\">&quot;未知使用者&quot;</span>);\n\n        <span class=\"keyword\">if</span> (_userConnections.TryGetValue(userName,<span class=\"keyword\">out</span> <span class=\"keyword\">var</span> connectionIds))\n        &#123;\n            <span class=\"keyword\">if</span> (!connectionIds.Contains(Context.ConnectionId))\n            &#123;\n                connectionIds.Add(Context.ConnectionId);\n            &#125;\n        &#125;\n        <span class=\"keyword\">else</span>\n        &#123;\n            _userConnections.Add(userName, <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt; &#123; Context.ConnectionId &#125;);\n        &#125;\n\n        <span class=\"keyword\">await</span> Groups.AddToGroupAsync(Context.ConnectionId, userName);\n        <span class=\"keyword\">await</span> <span class=\"keyword\">base</span>.OnConnectedAsync();\n    &#125;\n\n    <span class=\"comment\">// 斷線時要做的事</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnDisconnectedAsync</span>(<span class=\"params\">Exception? exception</span>)</span>\n    &#123;\n\n        <span class=\"keyword\">var</span> user = _userConnections.FirstOrDefault(x =&gt; x.Value.Contains(Context.ConnectionId)).Key;\n\n        <span class=\"keyword\">if</span> (user <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>)\n        &#123;\n            <span class=\"comment\">// 移除該用戶的連線</span>\n            _userConnections[user].Remove(Context.ConnectionId);\n\n            <span class=\"comment\">// 如果該用戶已經沒有任何連線</span>\n            <span class=\"keyword\">if</span> (!_userConnections[user].Any())\n            &#123;\n                <span class=\"comment\">// 移除用戶</span>\n                _userConnections.Remove(user);\n            &#125;\n\n            <span class=\"keyword\">await</span> Groups.RemoveFromGroupAsync(Context.ConnectionId, user);\n        &#125;\n\n        <span class=\"keyword\">await</span> <span class=\"keyword\">base</span>.OnDisconnectedAsync(exception);\n    &#125;\n&#125;</code></pre>\n<h3 id=\"WebhookController-cs\">WebhookController.cs</h3>\n<p>簡易提供全域、使用者群組、現有連線 api 端點</p>\n<pre><code class=\"highlight C#\">[<span class=\"meta\">Route(<span class=\"string\">&quot;api/[controller]&quot;</span>)</span>]\n[<span class=\"meta\">ApiController</span>]\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WebhookController</span> : <span class=\"title\">ControllerBase</span>\n&#123;\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IHubContext&lt;MessageHub&gt; hub;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WebhookController</span>(<span class=\"params\">IHubContext&lt;MessageHub&gt; hub</span>)</span>\n    &#123;\n        <span class=\"keyword\">this</span>.hub = hub;\n    &#125;\n\n    <span class=\"comment\">//全域推播</span>\n    [<span class=\"meta\">HttpPost(<span class=\"string\">&quot;all&quot;</span>)</span>]\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">SendAll</span>(<span class=\"params\">[FromBody]MessageDto message</span>)</span>\n    &#123;\n        <span class=\"keyword\">await</span> hub.Clients.All.SendAsync(<span class=\"string\">&quot;ReceiveMessage&quot;</span>, message);\n        <span class=\"keyword\">return</span> Ok();\n    &#125;\n\n    <span class=\"comment\">//群組推播(使用者群組)</span>\n    [<span class=\"meta\">HttpPost(<span class=\"string\">&quot;group&quot;</span>)</span>]\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">SendGroup</span>(<span class=\"params\">[FromBody] WebhookPayload payload</span>)</span>\n    &#123;\n        <span class=\"keyword\">var</span> message = <span class=\"keyword\">new</span> MessageDto\n        &#123;\n            Sender = payload.Sender,\n            Content = payload.Message,\n            TimeSpan = DateTime.Now\n        &#125;;\n        <span class=\"keyword\">await</span> hub.Clients.Groups(payload.Receiver).SendAsync(<span class=\"string\">&quot;ReceiveGroupMessage&quot;</span>, message);\n        <span class=\"keyword\">return</span> Ok();\n    &#125;\n\n    <span class=\"comment\">// 現有連線清單</span>\n    [<span class=\"meta\">HttpGet</span>]\n    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">GetUsers</span>()</span>\n    &#123;\n        <span class=\"keyword\">var</span> users = MessageHub._userConnections;\n        <span class=\"keyword\">return</span> Ok(users);\n    &#125;\n\n    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WebhookPayload</span>\n    &#123;\n        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Message &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;\n        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Sender &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;\n        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Receiver &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"webhook-api-curl\">webhook api curl</h3>\n<pre><code class=\"highlight ada\">curl -X <span class=\"symbol\">&#x27;POST</span>&#x27; \\\n  <span class=\"symbol\">&#x27;https</span>://localhost:<span class=\"number\">7244</span>/api/Webhook/<span class=\"keyword\">all</span>&#x27; \\\n  -H <span class=\"symbol\">&#x27;accept</span>: */*&#x27; \\\n  -H <span class=\"symbol\">&#x27;Content</span>-<span class=\"keyword\">Type</span>: application/json&#x27; \\\n  -d &#x27;&#123;\n  <span class=\"string\">&quot;sender&quot;</span>: <span class=\"string\">&quot;user&quot;</span>,\n  <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">&quot;test&quot;</span>\n&#125;&#x27;</code></pre>\n<h3 id=\"前端接收-webhook\">前端接收 webhook</h3>\n<p>前端使用 quasar vue typescript</p>\n<pre><code class=\"highlight ts\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;\n<span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> signalR <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@microsoft/signalr&#x27;</span>;\n<span class=\"keyword\">import</span> &#123; ref, onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;\n\n<span class=\"keyword\">type</span> <span class=\"title class_\">MessageDto</span> = &#123;\n  <span class=\"attr\">sender</span>: <span class=\"built_in\">string</span>;\n  <span class=\"attr\">content</span>: <span class=\"built_in\">string</span>;\n  <span class=\"attr\">timeSpan</span>: <span class=\"title class_\">Date</span>;\n&#125;;\n<span class=\"keyword\">const</span> user = <span class=\"string\">&#x27;admin&#x27;</span>;\n<span class=\"keyword\">const</span> receiveMsgs = ref&lt;<span class=\"title class_\">MessageDto</span>[]&gt;([]);\n\n<span class=\"keyword\">const</span> connection = <span class=\"keyword\">new</span> signalR.<span class=\"title class_\">HubConnectionBuilder</span>()\n  .<span class=\"title function_\">withUrl</span>(<span class=\"string\">`https://localhost:7244/hub?user=<span class=\"subst\">$&#123;user&#125;</span>`</span>)\n  .<span class=\"title function_\">withAutomaticReconnect</span>()\n  .<span class=\"title function_\">build</span>();\n\n<span class=\"comment\">//監聽全頻推播</span>\nconnection.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;ReceiveMessage&#x27;</span>, <span class=\"function\">(<span class=\"params\"><span class=\"attr\">res</span>: <span class=\"title class_\">MessageDto</span></span>) =&gt;</span> &#123;\n  receiveMsgs.<span class=\"property\">value</span>.<span class=\"title function_\">push</span>(res);\n&#125;);\n\n<span class=\"comment\">//監聽群組推播</span>\nconnection.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;ReceiveGroupMessage&#x27;</span>, <span class=\"function\">(<span class=\"params\"><span class=\"attr\">res</span>: <span class=\"title class_\">MessageDto</span></span>) =&gt;</span> &#123;\n  receiveMsgs.<span class=\"property\">value</span>.<span class=\"title function_\">push</span>(res);\n&#125;);\n\n<span class=\"comment\">//重新連線</span>\nconnection.<span class=\"title function_\">onreconnected</span>(<span class=\"function\">() =&gt;</span> &#123;\n  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Reconnected successfully.&#x27;</span>);\n&#125;);\n\nconnection.<span class=\"title function_\">onclose</span>(<span class=\"title function_\">async</span> () =&gt; &#123;\n  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Disconnected. Retrying connection...&#x27;</span>);\n  <span class=\"keyword\">await</span> <span class=\"title function_\">reconnect</span>();\n&#125;);\n\n<span class=\"keyword\">const</span> <span class=\"title function_\">reconnect</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;\n  <span class=\"keyword\">let</span> attempts = <span class=\"number\">0</span>;\n  <span class=\"keyword\">const</span> maxAttempts = <span class=\"number\">100</span>; <span class=\"comment\">// 最大嘗試次數</span>\n  <span class=\"keyword\">const</span> retryDelay = <span class=\"number\">30000</span>; <span class=\"comment\">// 嘗試間隔(ms)</span>\n\n  <span class=\"keyword\">while</span> (attempts &lt; maxAttempts) &#123;\n    <span class=\"keyword\">try</span> &#123;\n      <span class=\"keyword\">await</span> connection.<span class=\"title function_\">start</span>();\n      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Reconnected successfully.&#x27;</span>);\n      <span class=\"keyword\">return</span>; <span class=\"comment\">// 連線成功,退出循環</span>\n    &#125; <span class=\"keyword\">catch</span> (err) &#123;\n      attempts++;\n      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Reconnection attempt <span class=\"subst\">$&#123;attempts&#125;</span> failed.`</span>, err);\n      <span class=\"keyword\">if</span> (attempts &lt; maxAttempts) &#123;\n        <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, retryDelay)); <span class=\"comment\">// 等待后重试</span>\n      &#125; <span class=\"keyword\">else</span> &#123;\n        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Failed to reconnect after several attempts.&#x27;</span>)\n      &#125;\n    &#125;\n  &#125;\n&#125;;\n\n<span class=\"title function_\">onMounted</span>(<span class=\"title function_\">async</span> () =&gt; &#123;\n  <span class=\"keyword\">try</span> &#123;\n    <span class=\"keyword\">await</span> connection.<span class=\"title function_\">start</span>();\n    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;user&#125;</span> has connected`</span>)\n  &#125; <span class=\"keyword\">catch</span> (err) &#123;\n    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);\n  &#125;\n&#125;);\n&lt;/script&gt;</code></pre>\n<h3 id=\"參考資料\">參考資料</h3>\n<ul>\n<li><a href=\"https://learn.microsoft.com/zh-tw/aspnet/core/tutorials/signalr?view=aspnetcore-9.0&amp;WT.mc_id=dotnet-35129-website&amp;tabs=visual-studio\">https://learn.microsoft.com/zh-tw/aspnet/core/tutorials/signalr?view=aspnetcore-9.0&amp;WT.mc_id=dotnet-35129-website&amp;tabs=visual-studio</a></li>\n<li><a href=\"https://www.perplexity.ai/\">https://www.perplexity.ai/</a></li>\n<li><a href=\"https://www.npmjs.com/package/@microsoft/signalr\">https://www.npmjs.com/package/@microsoft/signalr</a></li>\n</ul>\n","categories":["後端"],"tags":["C#","SignalR"]},{"title":"IIS 安裝憑證","url":"/2025/02/14/server-certificate/","content":"<p>簡易紀錄 IIS 站台如何安裝憑證</p>\n<ol>\n<li>取得憑證檔案<br>\n<img src=\"/images/server-certificate/ssl.png\" alt=\"iis_file.png\"></li>\n<li>開啟 IIS 管理員</li>\n<li>選擇伺服器</li>\n<li>進入伺服器憑證</li>\n<li>匯入憑證檔案<br>\n<img src=\"/images/server-certificate/import_certificate.png\" alt=\"import_certificate.png\"></li>\n<li>選擇站台</li>\n<li>新增繫結<br>\n<img src=\"/images/server-certificate/add_link.png\" alt=\"add_link.png\"></li>\n<li>重新啟動並測試</li>\n</ol>\n","categories":["IIS"],"tags":["IIS"]},{"title":"滑動視窗(Sliding Window)","url":"/2025/01/20/sliding-window/","content":"<h3 id=\"概述\">概述</h3>\n<p>主要就是操作一個視窗的左右邊界，去檢查範圍內的數據，適合用於 Array 或是 String<br>\n可以避免重複已經檢查過的數據，<code>優化時間複雜度</code>，但只適用於<code>連續</code>數據</p>\n<h3 id=\"簡易範例\">簡易範例</h3>\n<p>再給定的數組[2, 5, 8 ,6 ,1]中，找出連續 3 個數字最大總和</p>\n<p><img src=\"/images/SlidingWindowExample.png\" alt=\"slidingWindow.png\"></p>\n<pre><code class=\"highlight js\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>];\n<span class=\"keyword\">var</span> findThreeLargest = <span class=\"keyword\">function</span> (<span class=\"params\">arr</span>) &#123;\n  <span class=\"keyword\">let</span> curSum = <span class=\"number\">0</span>;\n  <span class=\"comment\">// 初始視窗總和(前3個數總和)</span>\n  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;\n    curSum += arr[i];\n  &#125;\n\n  <span class=\"keyword\">let</span> maxSum = curSum; <span class=\"comment\">// 最大總和</span>\n  <span class=\"keyword\">let</span> maxSumIndex = <span class=\"number\">0</span>; <span class=\"comment\">// 最大總和的起始位置</span>\n  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;\n    curSum = curSum - arr[i - <span class=\"number\">3</span>] + arr[i];\n    <span class=\"comment\">// 更新最大總和的起始位置</span>\n    <span class=\"keyword\">if</span> (curSum &gt; maxSum) &#123;\n      maxSum = curSum;\n      maxSumIndex = i - <span class=\"number\">3</span>;\n    &#125;\n  &#125;\n  <span class=\"keyword\">return</span> &#123; maxSum, maxSumIndex &#125;;\n&#125;;</code></pre>\n<h3 id=\"參考資料\">參考資料</h3>\n<ul>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10364268\">https://ithelp.ithome.com.tw/articles/10364268</a></li>\n<li><a href=\"https://medium.com/%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/%E6%BC%94%E7%AE%97%E6%B3%95%E7%AD%86%E8%A8%98%E7%B3%BB%E5%88%97-two-pointer-%E8%88%87sliding-window-8742f45f3f55\">https://medium.com/技術筆記/演算法筆記系列-two-pointer-與sliding-window-8742f45f3f55</a></li>\n</ul>\n","categories":["基礎"]},{"title":"C# 使用IdGen產生Id(雪花算法)","url":"/2024/11/19/snowflake/","content":"<h1>雪花算法</h1>\n<h2 id=\"概述\">概述</h2>\n<p>公司的資料表常常使用很奇怪的欄位來去當識別鍵(例如時間戳)，既然都用時間戳了不如用雪花算法產 ID 當 PK<br>\n雪花算法是 Twitter 開源的生成分散式全域產生 ID 的演算法</p>\n<h2 id=\"格式\">格式</h2>\n<p>雪花 ID 有 64 位元</p>\n<ul>\n<li>1 位為符號位始終是 0</li>\n<li>41 位為時間戳，精度毫秒</li>\n<li>10 位可為(10 位機器 ID) 或 (5 位數據中心 ID + 5 位機器 ID)，可識別 1024 台機器</li>\n<li>12 位為序列號 =&gt; 代表每毫秒可以有 4096 個 ID</li>\n</ul>\n<p><img src=\"/images/snowflake.png\" alt=\"snowflake_structure.image\"></p>\n<h2 id=\"優缺點\">優缺點</h2>\n<h3 id=\"優點\">優點</h3>\n<ol>\n<li>ID 包含時間戳，有序可排序</li>\n<li>簡單速度快</li>\n</ol>\n<h3 id=\"缺點\">缺點</h3>\n<ol>\n<li>依賴系統時間，如果系統時間回退或跳躍，會產生不唯一 ID</li>\n<li>自己手動分配機器 ID，分配不當，產生不唯一 ID</li>\n</ol>\n<h2 id=\"Install\">Install</h2>\n<pre><code class=\"highlight ada\">dotnet add <span class=\"keyword\">package</span> <span class=\"title\">IdGen</span></code></pre>\n<h2 id=\"DI-注入-Optionl\">DI 注入(Optionl)</h2>\n<pre><code class=\"highlight ada\">dotnet add <span class=\"keyword\">package</span> <span class=\"title\">IdGen.DependencyInjection</span></code></pre>\n<h2 id=\"Usage\">Usage</h2>\n<h3 id=\"一般\">一般</h3>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">var</span> generator = <span class=\"keyword\">new</span> IdGenerator(<span class=\"number\">0</span>);\n<span class=\"keyword\">var</span> id = generator.CreateId();</code></pre>\n<h3 id=\"依賴注入\">依賴注入</h3>\n<p>Program.cs</p>\n<pre><code class=\"highlight C#\">builder.Services.AddIdGen(<span class=\"number\">0</span>);</code></pre>\n<p>Example.cs</p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Example</span>\n&#123;\n    <span class=\"comment\">//private readonly IIdGenerator&lt;long&gt; idGenerator;</span>\n    <span class=\"comment\">//public Example (IIdGenerator&lt;long&gt; idGenerator)</span>\n    <span class=\"comment\">//&#123;</span>\n    <span class=\"comment\">//    this.idGenerator = idGenerator;</span>\n    <span class=\"comment\">//&#125;</span>\n\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IdGenerator idGenerator;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Example</span>(<span class=\"params\">IdGenerator idGenerator</span>)</span>\n    &#123;\n        <span class=\"keyword\">this</span>.idGenerator = idGenerator;\n    &#125;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">long</span> <span class=\"title\">GetId</span>()</span>\n    &#123;\n        <span class=\"keyword\">var</span> id = idGenerator.CreateId();\n        <span class=\"keyword\">return</span> id;\n    &#125;\n&#125;</code></pre>\n<h2 id=\"參考資料\">參考資料</h2>\n<p><a href=\"https://github.com/RobThree/IdGen?tab=readme-ov-file\">https://github.com/RobThree/IdGen?tab=readme-ov-file</a></p>\n","categories":["後端"],"tags":["C#"]},{"title":"sqlkata","url":"/2025/04/03/sqlkata/","content":"<h2 id=\"簡介\">簡介</h2>\n<p>SqlKata 查詢生成器是一個用 C#編寫的功能強大 SQL 生成器，它安全、不受框架影響，靈感來源於 Laravel Query Builder 和 Knex 等頂級查詢建立工具</p>\n<ul>\n<li>乾淨的命名，與 SQL 語法相似</li>\n<li>允許統一 API 處理多個數據庫，且可搭配 Dapper 使用，有效替代數據庫的存儲過程</li>\n<li>支持複雜查詢，如:嵌套條件、子查詢…等</li>\n<li>目前有支援的資料庫 SqlServer、MySql、PostgreSql、Oracle …等</li>\n<li><a href=\"https://github.com/fairking/FluentSqlKata\">擴充項目</a>，搭配 EntityFramework Core 6 使用</li>\n<li><a href=\"https://sqlkata.com/docs\">詳細文檔</a></li>\n<li><a href=\"https://sqlkata.com/playground\">PlayGround</a></li>\n</ul>\n<h2 id=\"安裝\">安裝</h2>\n<pre><code class=\"highlight ada\">$ dotnet add <span class=\"keyword\">package</span> <span class=\"title\">SqlKata</span>\n$ dotnet add <span class=\"keyword\">package</span> <span class=\"title\">SqlKata.Execution # (選用) 如果您希望執行支援</span></code></pre>\n<h2 id=\"範例\">範例</h2>\n<h3 id=\"簡易實作-以-Oracle-為例\">簡易實作(以 Oracle 為例)</h3>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">var</span> connection = <span class=\"keyword\">new</span> OracleConnection(connectionString);\n<span class=\"keyword\">var</span> compiler = <span class=\"keyword\">new</span> OracleCompiler();\n<span class=\"keyword\">var</span> db = <span class=\"keyword\">new</span> QueryFactory(conn, compiler);\n<span class=\"comment\">// QueryFactory 由 SqlKata.Execution 套件提供</span>\n<span class=\"keyword\">var</span> books = db.Query(<span class=\"string\">&quot;Books&quot;</span>).Get();</code></pre>\n<h3 id=\"Dependency-injection-注入實作-For-NET-6\">Dependency injection 注入實作(For .NET 6)</h3>\n<p>QueryFactoryFactory.cs</p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">QueryFactoryFactory</span> : <span class=\"title\">IQueryFactoryFactory</span>\n&#123;\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IConfiguration _configuration;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">QueryFactoryFactory</span>(<span class=\"params\">IConfiguration configuration</span>)</span>\n    &#123;\n        _configuration = configuration;\n    &#125;\n    <span class=\"function\"><span class=\"keyword\">public</span> QueryFactory <span class=\"title\">CreateQueryFactory</span>(<span class=\"params\"><span class=\"built_in\">string</span> dbKey</span>)</span>\n    &#123;\n        <span class=\"keyword\">var</span> cs = _configuration.GetConnectionString(dbKey);\n        <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(cs))\n        &#123;\n            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">$&quot;Connection string for <span class=\"subst\">&#123;dbKey&#125;</span> is not found.&quot;</span>);\n        &#125;\n        <span class=\"keyword\">var</span> conn = <span class=\"keyword\">new</span> OracleConnection(cs);\n        <span class=\"keyword\">var</span> compiler = <span class=\"keyword\">new</span> OracleCompiler();\n        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> QueryFactory(conn, compiler);\n    &#125;\n&#125;\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IQueryFactoryFactory</span>\n&#123;\n    <span class=\"function\">QueryFactory <span class=\"title\">CreateQueryFactory</span>(<span class=\"params\"><span class=\"built_in\">string</span> dbKey</span>)</span>;\n&#125;\n</code></pre>\n<p>Program.cs</p>\n<pre><code class=\"highlight C#\">builder.Services.AddTransient&lt;IQueryFactoryFactory, QueryFactoryFactory&gt;();</code></pre>\n<p>HomeController.cs</p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">using</span> SqlKata;\n<span class=\"keyword\">using</span> SqlKata.Execution;\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> &#123;\n\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IQueryFactoryFactory factory;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeController</span>(<span class=\"params\">IQueryFactoryFactory factory</span>)</span>\n    &#123;\n       <span class=\"keyword\">this</span>.factory = factory;\n    &#125;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">Get</span>()</span>\n    &#123;\n       <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> db = factory.CreateQueryFactory(dbKey);\n\n       <span class=\"comment\">// 這裡 books 的類型是 `IEnumerable&lt;dynamic&gt;`</span>\n       <span class=\"keyword\">var</span> books = <span class=\"keyword\">await</span> db.Query(<span class=\"string\">&quot;Books&quot;</span>)\n           .Where(<span class=\"string\">&quot;IsPublished&quot;</span>, <span class=\"literal\">true</span>)\n           .GetAsync();\n\n       <span class=\"comment\">// or `IEnumerable&lt;Book&gt;` if using the Generic overload</span>\n       <span class=\"keyword\">var</span> books = <span class=\"keyword\">await</span> db.Query(<span class=\"string\">&quot;Books&quot;</span>)\n           .Where(<span class=\"string\">&quot;IsPublished&quot;</span>, <span class=\"literal\">true</span>)\n           .GetAsync&lt;Book&gt;();\n\n       <span class=\"keyword\">return</span> Ok(books);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"參考資料\">參考資料</h2>\n<ul>\n<li><a href=\"https://sqlkata.com/\">https://sqlkata.com/</a></li>\n<li><a href=\"https://github.com/sqlkata/querybuilder\">https://github.com/sqlkata/querybuilder</a></li>\n<li><a href=\"https://www.cnblogs.com/shanyou/p/16756669.html\">https://www.cnblogs.com/shanyou/p/16756669.html</a></li>\n</ul>\n","categories":["後端"],"tags":["C#","SQL","SqlKata"]},{"title":"文字片段","url":"/2024/12/13/text-fragments/","content":"<h3 id=\"什麼是文字片段-Text-Fragments\">什麼是文字片段(Text Fragments)</h3>\n<p>Text Fragments 是一種新的網頁功能<br>\n不需使用錨點標記（anchor tags）就可以讓使用者連結至特定文字<br>\n且會自動高亮顯示並滾動至該文本位置<br>\n<a href=\"https://caniuse.com/mdn-html_elements_a_text_fragments\">目前支援的版本與瀏覽器</a></p>\n<h3 id=\"使用方法\">使用方法</h3>\n<p>基本結構 :</p>\n<pre><code class=\"highlight asciidoc\"><span class=\"link\">https://example.com/page.html#:~:text=</span>[<span class=\"string\">前綴文字-,</span>]開始文字[,結束文字][,-後綴文字]</code></pre>\n<p>主要組成 :</p>\n<ul>\n<li>:~: 指令代表這是文字片段</li>\n<li>text= 要搜尋的文字</li>\n<li>[] 選用組件</li>\n</ul>\n<p>組件說明 :</p>\n<ul>\n<li>前綴文字 : 應出現在開始文字前面的文字</li>\n<li>開始文字 : 目標片段開頭文字</li>\n<li>結束文字 : 目標片段結尾文字</li>\n<li>後綴文字 : 應出現在結尾文字後面的文字</li>\n</ul>\n<p>樣式調整可透過<code>::target-text</code>進行調整</p>\n<pre><code class=\"highlight css\">::target-text &#123;\n  <span class=\"attribute\">background-color</span>: yellow;\n&#125;</code></pre>\n<h3 id=\"使用範例\">使用範例</h3>\n<pre><code class=\"highlight dts\"><span class=\"symbol\">http:</span><span class=\"comment\">//127.0.0.1:5500/index.html</span></code></pre>\n<p><img src=\"/images/txtfrag1.png\" alt=\"txtfrag1.png\"></p>\n<pre><code class=\"highlight avrasm\"><span class=\"symbol\">http:</span>//<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">5500</span>/index.html<span class=\"meta\">#:~:text=心放地,學的有</span></code></pre>\n<p><img src=\"/images/txtfrag2.png\" alt=\"txtfrag2.png\"></p>\n<pre><code class=\"highlight pgsql\">http://<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">5500</span>/<span class=\"keyword\">index</span>.html#:~:<span class=\"type\">text</span>=如及間沒人說利驗於民物時人&amp;<span class=\"type\">text</span>=沒才雨叫訴</code></pre>\n<p><img src=\"/images/txtfrag3.png\" alt=\"txtfrag3.png\"></p>\n<h3 id=\"參考資料\">參考資料</h3>\n<ul>\n<li><a href=\"https://alfy.blog/2024/10/19/linking-directly-to-web-page-content.html\">https://alfy.blog/2024/10/19/linking-directly-to-web-page-content.html</a></li>\n<li><a href=\"https://claude.ai/new\">https://claude.ai/new</a></li>\n</ul>\n","categories":["前端"]},{"title":"時間複雜度","url":"/2024/11/27/time-complexity/","content":"<h2 id=\"概述\">概述</h2>\n<p>時間複雜度代表的是演算法隨著資料量變大時的增長趨勢<br>\n數學符號<code>大O記號(big-O notation)</code></p>\n<h2 id=\"常見型別\">常見型別</h2>\n<ul>\n<li>常數階 O(1)</li>\n</ul>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">Constant</span>(<span class=\"params\"><span class=\"built_in\">int</span> n</span>)</span>\n&#123;\n    <span class=\"built_in\">int</span> count = <span class=\"number\">0</span>;\n    <span class=\"comment\">// 迴圈次數與 n 無關</span>\n    <span class=\"built_in\">int</span> size = <span class=\"number\">10000</span>;\n    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)\n    &#123;\n        count++;\n    &#125;\n    <span class=\"keyword\">return</span> count;\n&#125;</code></pre>\n<ul>\n<li>線性階 O(n)</li>\n</ul>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">Linear</span>(<span class=\"params\"><span class=\"built_in\">int</span> n</span>)</span>\n&#123;\n    <span class=\"built_in\">int</span> count = <span class=\"number\">0</span>;\n    <span class=\"comment\">// 迴圈次數 n 次</span>\n    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)\n    &#123;\n        count++;\n    &#125;\n    <span class=\"keyword\">return</span> count;\n&#125;</code></pre>\n<ul>\n<li>平方階 O(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>)</li>\n</ul>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">Quadratic</span>(<span class=\"params\"><span class=\"built_in\">int</span> n</span>)</span>\n&#123;\n    <span class=\"built_in\">int</span> count = <span class=\"number\">0</span>;\n    <span class=\"comment\">// 迴圈次數 n*n 次</span>\n    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)\n    &#123;\n        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)\n        &#123;\n            count++;\n        &#125;\n    &#125;\n    <span class=\"keyword\">return</span> count;\n&#125;</code></pre>\n<ul>\n<li>指數階 O(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>)</li>\n</ul>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">Exponential</span>(<span class=\"params\"><span class=\"built_in\">int</span> n</span>)</span>\n&#123;\n    <span class=\"built_in\">int</span> count = <span class=\"number\">0</span>;\n    <span class=\"built_in\">int</span> bas = <span class=\"number\">1</span>;\n    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)\n    &#123;\n        <span class=\"comment\">//迴圈次數為2^n次</span>\n        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>; j &lt; bas; j++)\n        &#123;\n            count++;\n        &#125;\n        bas *= <span class=\"number\">2</span>;\n    &#125;\n    <span class=\"keyword\">return</span> count;\n&#125;</code></pre>\n<ul>\n<li>對數階 O(logn)</li>\n</ul>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">Logarithmic</span>(<span class=\"params\"><span class=\"built_in\">int</span> n</span>)</span>\n&#123;\n    <span class=\"built_in\">int</span> count = <span class=\"number\">0</span>;\n    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">1</span>) &#123;\n        n /= <span class=\"number\">2</span>;\n        count++;\n    &#125;\n    <span class=\"keyword\">return</span> count;\n&#125;</code></pre>\n<ul>\n<li>線性對數階 O(nlogn)</li>\n</ul>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">LinearLogRecur</span>(<span class=\"params\"><span class=\"built_in\">int</span> n</span>)</span>\n&#123;\n    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\n    <span class=\"built_in\">int</span> count = LinearLogRecur(n / <span class=\"number\">2</span>);\n    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)\n    &#123;\n        count++;\n    &#125;\n    <span class=\"keyword\">return</span> count;\n&#125;</code></pre>\n<ul>\n<li>階乘階 O(n!)</li>\n</ul>\n<pre><code class=\"highlight C#\"><span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">FactorialRecur</span>(<span class=\"params\"><span class=\"built_in\">int</span> n</span>)</span>\n&#123;\n    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\n    <span class=\"built_in\">int</span> count = <span class=\"number\">0</span>;\n    <span class=\"comment\">// n * (n - 1) * (n - 2) * ... * 2 * 1</span>\n    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)\n    &#123;\n        count += FactorialRecur(n - <span class=\"number\">1</span>);\n    &#125;\n    <span class=\"keyword\">return</span> count;\n&#125;</code></pre>\n<h2 id=\"參考資料\">參考資料</h2>\n<ul>\n<li><a href=\"https://www.hello-algo.com/zh-hant/chapter_computational_complexity/time_complexity/\">https://www.hello-algo.com/zh-hant/chapter_computational_complexity/time_complexity/</a></li>\n</ul>\n","categories":["基礎"]},{"title":"樹狀資料","url":"/2025/02/05/tree/","content":"<p><img src=\"/images/tree_data_structure.jpg\" alt=\"tree_data_structure.jpg\"></p>\n<h2 id=\"樹狀結構介紹\">樹狀結構介紹</h2>\n<ul>\n<li>Node : 樹的基本單位，紀錄節點資料與子節點有哪些</li>\n<li>Root Node : 根節點，樹的最高節點</li>\n<li>Leaf Node : 葉節點，沒有子節點的節點</li>\n<li>Edge : 連接兩個節點的線，表示節點之間的關係</li>\n<li>Parent Node : 父節點(上層節點)，一個節點只會有一個父節點</li>\n<li>Child Node : 子節點，一個節點可以連結多個子節點</li>\n<li>Sibling Node : 兄弟節點，有相同父節點的節點</li>\n<li>Depth : 從根節點到該節點的路徑長度</li>\n<li>Height : 該節點到最遠葉節點的路徑長度</li>\n<li>Level : 節點層次</li>\n<li>Subtree : 某節點的所有子節點後代</li>\n</ul>\n<h2 id=\"樹的種類\">樹的種類</h2>\n<ol>\n<li>二元樹 (Binary Tree)\n<ul>\n<li>一個節點最多兩個子節點</li>\n</ul>\n</li>\n<li>二元搜尋樹 (Binary Search Tree, BST)\n<ul>\n<li>左子樹所有節點值小於根節點值</li>\n<li>右子樹所有節點值大於根節點值</li>\n</ul>\n</li>\n<li>平衡樹 (Balanced Tree)</li>\n<li>滿二元樹 (Full Binary Tree)</li>\n<li>完全二元樹 (Complete Binary Tree)</li>\n<li>B 樹 (B-Tree)</li>\n<li>堆積 (Heap)</li>\n<li>字典樹 (Trie)</li>\n</ol>\n<h2 id=\"樹的遍歷-Traversal\">樹的遍歷(Traversal)</h2>\n<ol>\n<li>深度優先遍歷 (Depth-First Search, DFS)\n<ul>\n<li>先訪問子節點，再訪問兄弟節點</li>\n<li>3 種遍歷方法\n<ul>\n<li>前序遍歷 (Pre-order)</li>\n<li>中序遍歷 (In-order)</li>\n<li>後續遍歷 (Post-order)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>廣度優先遍歷 (Breadth-First Search, BFS)\n<ul>\n<li>階層遍歷，一層一層從左到右</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"相關實作-C\">相關實作(C#)</h2>\n<pre><code class=\"highlight C#\"><span class=\"comment\">// 節點</span>\n<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span>\n&#123;\n    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> val;\n    <span class=\"keyword\">public</span> TreeNode left;\n    <span class=\"keyword\">public</span> TreeNode right;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span>(<span class=\"params\"><span class=\"built_in\">int</span> val = <span class=\"number\">0</span>, TreeNode left = <span class=\"literal\">null</span>, TreeNode right = <span class=\"literal\">null</span></span>)</span>\n    &#123;\n        <span class=\"keyword\">this</span>.val = val;\n        <span class=\"keyword\">this</span>.left = left;\n        <span class=\"keyword\">this</span>.right = right;\n    &#125;\n&#125;\n\n<span class=\"comment\">// 深度優先遍歷 (Depth-First Search, DFS)</span>\n<span class=\"comment\">// 前序遍歷</span>\n<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">PreorderTraversal</span>(<span class=\"params\">TreeNode root</span>)</span>\n&#123;\n    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;\n    Console.Write(root.val + <span class=\"string\">&quot; &quot;</span>) <span class=\"comment\">// 訪問節點</span>\n    PreorderTraversal(root.left); <span class=\"comment\">// 遞迴訪問左子樹</span>\n    PreorderTraversal(root.right); <span class=\"comment\">// 遞迴訪問右子樹</span>\n&#125;\n\n<span class=\"comment\">// 中序遍歷</span>\n<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InorderTraversal</span>(<span class=\"params\">TreeNode root</span>)</span>\n&#123;\n    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;\n    InorderTraversal(root.left);    <span class=\"comment\">// 遞迴遍歷左子樹</span>\n    Console.Write(root.val + <span class=\"string\">&quot; &quot;</span>);  <span class=\"comment\">// 訪問節點</span>\n    InorderTraversal(root.right);   <span class=\"comment\">// 遞迴遍歷右子樹</span>\n&#125;\n\n<span class=\"comment\">// 後序遍歷</span>\n<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">PostorderTraversal</span>(<span class=\"params\">TreeNode root</span>)</span>\n&#123;\n    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;\n    PostorderTraversal(root.left);   <span class=\"comment\">// 遞迴遍歷左子樹</span>\n    PostorderTraversal(root.right);  <span class=\"comment\">// 遞迴遍歷右子樹</span>\n    Console.Write(root.val + <span class=\"string\">&quot; &quot;</span>);   <span class=\"comment\">// 訪問節點</span>\n&#125;\n\n<span class=\"comment\">// 廣度優先遍歷 (Breadth-First Search, BFS)</span>\n<span class=\"comment\">// 階層遍歷</span>\n<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">LevelOrderTraversal</span>(<span class=\"params\">TreeNode root</span>)</span>\n&#123;\n    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;\n\n    Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> Queue&lt;TreeNode&gt;();\n    queue.Enqueue(root);\n\n    <span class=\"keyword\">while</span> (queue.Count &gt; <span class=\"number\">0</span>)\n    &#123;\n        TreeNode node = queue.Dequeue();\n        Console.Write(node.val + <span class=\"string\">&quot; &quot;</span>);\n\n        <span class=\"keyword\">if</span> (node.left != <span class=\"literal\">null</span>) queue.Enqueue(node.left);\n        <span class=\"keyword\">if</span> (node.right != <span class=\"literal\">null</span>) queue.Enqueue(node.right);\n    &#125;\n&#125;</code></pre>\n<h2 id=\"參考資料\">參考資料</h2>\n<ul>\n<li><a href=\"https://medium.com/%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/%E5%9F%BA%E7%A4%8E%E6%BC%94%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97-tree-%E6%A8%B9%E7%8B%80%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-d10fe8ac1ce2\">基礎演算法系列 — Tree 樹狀資料結構</a></li>\n<li><a href=\"https://chat.deepseek.com/\">Deepseek</a></li>\n<li><a href=\"https://www.tutorialspoint.com/data_structures_algorithms/tree_data_structure.htm\">Tree Data Structure</a></li>\n</ul>\n","categories":["基礎"],"tags":["資料結構"]},{"title":"WebRTC","url":"/2025/05/01/webrtc/","content":"<p>簡易記錄一下 WebRTC 的基本概念</p>\n<h2 id=\"基本建立點對點連線的流程\">基本建立點對點連線的流程</h2>\n<p><img src=\"/images/webrtc/P2PConnFlow.png\" alt=\"p2pConnFlow.png\"></p>\n<h3 id=\"信令-Signaling-：\">信令 (Signaling)：</h3>\n<ol>\n<li>兩個 WebRTC 客户端（Peer A 和 Peer B）透過一個<code>信令伺服器</code>進行初始的資訊交換。這個伺服器不參與實際的媒體傳輸。</li>\n<li>Peer A (發起方 - Offerer) 創建一個包含其媒體能力和網路資訊的 SDP Offer。</li>\n<li>Peer A 收集其 ICE Candidates（潛在的網路位址）。</li>\n<li>Peer A 將 SDP Offer 和 ICE Candidates 透過信令伺服器發送給 Peer B。</li>\n<li>Peer B (接收方 - Answerer) 收到 SDP Offer 和 ICE Candidates。</li>\n<li>Peer B 設定遠端的 SDP Offer，並創建包含其自身媒體能力和網路資訊的 SDP Answer。</li>\n<li>Peer B 也收集其 ICE Candidates。</li>\n<li>Peer B 將 SDP Answer 和 ICE Candidates 透過信令伺服器發送回 Peer A。</li>\n<li>Peer A 收到 SDP Answer 和 ICE Candidates，並設定遠端的 SDP Answer。</li>\n<li>雙方持續透過信令伺服器交換 ICE Candidates。</li>\n</ol>\n<h3 id=\"ICE-連線建立-ICE-Connection-Establishment-：\">ICE 連線建立 (ICE Connection Establishment)：</h3>\n<ol>\n<li>每個 Peer 在收到對方的 ICE Candidates 後，會嘗試與這些候選者建立網路連線。</li>\n<li>這個過程會嘗試各種可能的路徑（直接連接、透過 STUN、透過 TURN）。</li>\n<li>當找到一個可用的連線路徑時，ICE 連線建立成功。</li>\n</ol>\n<h3 id=\"媒體和資料傳輸：\">媒體和資料傳輸：</h3>\n<ol>\n<li>一旦 ICE 連線建立，兩個 Peer 就可以直接透過這個點對點連線傳輸音訊、視訊或任意資料（使用 Data Channels）。</li>\n</ol>\n<h2 id=\"相關名詞簡介：\">相關名詞簡介：</h2>\n<h3 id=\"WebRTC-Web-Real-Time-Communication-：\">WebRTC (Web Real-Time Communication)：</h3>\n<p>一個開放原始碼專案，提供瀏覽器和行動應用程式之間即時音訊、視訊和資料交換的能力，無需外掛程式。(目前只有 js)</p>\n<h3 id=\"Peer-對等方-：\">Peer (對等方)：</h3>\n<p>在 WebRTC 通訊中的一個端點，通常是一個瀏覽器或應用程式。</p>\n<h3 id=\"點對點-Peer-to-Peer-P2P-：\">點對點 (Peer-to-Peer, P2P)：</h3>\n<p>一種網路模型，其中兩個或多個參與者可以直接互相通信，而不需要透過中央伺服器（在媒體和資料傳輸階段）。</p>\n<h3 id=\"信令-Signaling-：-t2\">信令 (Signaling)：</h3>\n<p>在 WebRTC 連線建立之前，兩個 Peer 之間交換控制資訊（例如 SDP 和 ICE Candidates）的過程。信令機制不是 WebRTC 本身定義的，需要開發者自行實作。</p>\n<h3 id=\"信令伺服器-Signaling-Server-：\">信令伺服器 (Signaling Server)：</h3>\n<p>一個中介伺服器，用於在 WebRTC 連線建立的初始階段協助 Peer 發現彼此並交換信令訊息。</p>\n<h3 id=\"SDP-Session-Description-Protocol-：\">SDP (Session Description Protocol)：</h3>\n<p>一種標準化的文字格式，用於描述多媒體會話的屬性，例如支援的媒體類型、編解碼器、網路位址等。在 WebRTC 中，SDP 用於在連接建立前協商媒體格式。</p>\n<h3 id=\"Offer-Answer-模型-Offer-Answer-Model-：\">Offer/Answer 模型 (Offer/Answer Model)：</h3>\n<p>WebRTC 使用這個模型來協商會話參數。發起方創建一個 Offer SDP，接收方回應一個 Answer SDP。</p>\n<h3 id=\"ICE-Interactive-Connectivity-Establishment-：\">ICE (Interactive Connectivity Establishment)：</h3>\n<p>一個用於 NAT 穿透的協定。ICE 的目標是找到兩個 Peer 之間最佳的網路路徑來建立直接連線。</p>\n<h3 id=\"ICE-Candidate-ICE-候選者-：\">ICE Candidate (ICE 候選者)：</h3>\n<p>描述一個 Peer 可能的網路位址和連接埠的資訊，用於 ICE 連線建立過程。</p>\n<h3 id=\"STUN-Session-Traversal-Utilities-for-NAT-伺服器：\">STUN (Session Traversal Utilities for NAT) 伺服器：</h3>\n<p>一種協助位於 NAT 後面的 Peer 發現其公有 IP 位址和連接埠的伺服器。</p>\n<h3 id=\"TURN-Traversal-Using-Relays-around-NAT-伺服器：\">TURN (Traversal Using Relays around NAT) 伺服器：</h3>\n<p>一種在直接連線和 STUN 無法工作時，作為中繼伺服器轉發 Peer 之間流量的伺服器。</p>\n<h3 id=\"NAT-Network-Address-Translator-：\">NAT (Network Address Translator)：</h3>\n<p>一種網路設備，用於將私有網路中的多個裝置的 IP 位址轉換為一個或少數幾個公有 IP 位址，以便它們可以存取網際網路。NAT 會導致直接的點對點連線變得困難。</p>\n<h2 id=\"範例\">範例</h2>\n<p>Google 給的範例，可以參考參考對照學習 <a href=\"https://github.com/webrtc/samples\">Samples</a></p>\n<h2 id=\"參考資料\">參考資料</h2>\n<ul>\n<li><a href=\"https://clairechang.tw/2023/04/25/webrtc/webrtc-intro/\">https://clairechang.tw/2023/04/25/webrtc/webrtc-intro/</a></li>\n<li><a href=\"https://webrtc.org/?hl=zh-tw\">https://webrtc.org/?hl=zh-tw</a></li>\n<li><a href=\"https://webrtcforthecurious.com/zh/\">https://webrtcforthecurious.com/zh/</a></li>\n</ul>\n","categories":["後端"],"tags":["js","webrtc"]},{"title":"C# 使用Winscp上傳檔案","url":"/2024/11/19/winscp/","content":"<h2 id=\"概述\">概述</h2>\n<p>接手了前輩的專案，以前都要自己手動上傳檔案，好麻煩<br>\n因此來看看怎麼用 Winscp 套件來串接，配合後續製作成排程程式，自動上傳</p>\n<h2 id=\"Install\">Install</h2>\n<pre><code class=\"highlight powershell\">dotnet add package WinSCP</code></pre>\n<h2 id=\"Example\">Example</h2>\n<pre><code class=\"highlight C#\"><span class=\"comment\">// 連線設定</span>\nSessionOptions sessionOptions = <span class=\"keyword\">new</span> SessionOptions\n&#123;\n    Protocol = Protocol.Sftp,\n    HostName = <span class=\"string\">&quot;hostname&quot;</span>,\n    PortNumber = port,\n    UserName = <span class=\"string\">&quot;xxxx&quot;</span>,\n    SshHostKeyFingerprint = <span class=\"string\">&quot;ssh-rsa 2048 xxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>,\n    SshPrivateKeyPath = <span class=\"string\">&quot;....&quot;</span> <span class=\"comment\">// 私鑰路徑自行調整(選用)</span>\n&#125;;\n\n<span class=\"comment\">// 開啟會話</span>\n<span class=\"keyword\">using</span> <span class=\"keyword\">var</span> session = <span class=\"keyword\">new</span> Session();\nsession.Open(sessionOptions);\n\n<span class=\"comment\">// 定義上傳的文件路徑和遠端目錄</span>\n<span class=\"built_in\">string</span> localFilePath = <span class=\"string\">&quot;文件路徑&quot;</span>;\n<span class=\"built_in\">string</span> remoteDirectory = <span class=\"string\">&quot;伺服器目錄&quot;</span>; <span class=\"comment\">// 遠端伺服器的目錄</span>\n\n<span class=\"comment\">// 上傳文件</span>\nTransferOperationResult transferResult;\ntransferResult = <span class=\"keyword\">this</span>.session.PutFiles(localFilePath, remoteDirectory);\n\n<span class=\"comment\">// 檢查上傳是否成功</span>\ntransferResult.Check();</code></pre>\n<h2 id=\"參考資料\">參考資料</h2>\n<p><a href=\"https://winscp.net/eng/docs/library#csharp\">https://winscp.net/eng/docs/library#csharp</a></p>\n","categories":["後端"],"tags":["C#","Winscp"]},{"title":"categories","url":"/categories/index.html","content":""},{"title":"標籤","url":"/tags/index.html","content":""}]