[{"title":"C# Web api使用Quartz進行一次性排程","url":"/2024/11/19/quartz/","content":"<h2 id=\"Install\">Install</h2>\n<pre><code class=\"highlight powershell\"><span class=\"built_in\">Install-Package</span> Quartz.AspNetCore\n<span class=\"built_in\">Install-Package</span> Quartz.Extensions.DependencyInjection\n<span class=\"built_in\">Install-Package</span> Quartz.Serialization.Json</code></pre>\n<h2 id=\"appsetting-json\">appsetting.json</h2>\n<p>這邊使用 Oracle 資料庫做為持久化儲存<a href=\"https://github.com/quartznet/quartznet/tree/main/database/tables\">各類資料庫腳本</a></p>\n<pre><code class=\"highlight json\"><span class=\"attr\">&quot;Quartz&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>\n  <span class=\"attr\">&quot;quartz.scheduler.instanceName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;QuartzOracleScheduler&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.scheduler.instanceId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;AUTO&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.jobStore.type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Quartz.Impl.AdoJobStore.JobStoreTX, Quartz&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.jobStore.useProperties&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;true&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.jobStore.dataSource&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;default&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.jobStore.tablePrefix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;QRTZ_&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.jobStore.driverDelegateType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Quartz.Impl.AdoJobStore.OracleDelegate, Quartz&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.dataSource.default.provider&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;OracleODPManaged&quot;</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">&quot;quartz.dataSource.default.connectionString&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Your Connection String&quot;</span>\n<span class=\"punctuation\">&#125;</span></code></pre>\n<h2 id=\"Job-cs\">Job.cs</h2>\n<pre><code class=\"highlight C#\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SendTasJob</span> : <span class=\"title\">IJob</span>\n &#123;\n     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Execute</span>(<span class=\"params\">IJobExecutionContext context</span>)</span>\n     &#123;\n         <span class=\"comment\">//Job要實作的內容</span>\n          <span class=\"keyword\">var</span> tasid = context.MergedJobDataMap.GetString(<span class=\"string\">&quot;tasid&quot;</span>);\n          <span class=\"keyword\">var</span> welcomeText = context.MergedJobDataMap.GetString(<span class=\"string\">&quot;welcomeText&quot;</span>);\n          Console.WriteLine(tasid + welcomeText);\n          <span class=\"keyword\">return</span> Task.CompletedTask;\n     &#125;\n&#125;</code></pre>\n<h2 id=\"Controller-cs\">Controller.cs</h2>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TasController</span> : <span class=\"title\">ControllerBase</span>\n&#123;\n\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ISchedulerFactory schedulerFactory;\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IdGenerator idGenerator;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TasController</span>(<span class=\"params\">ISchedulerFactory schedulerFactory,</span></span>\n<span class=\"params\"><span class=\"function\">                         IdGenerator idGenerator</span>)</span>\n    &#123;\n        <span class=\"keyword\">this</span>.schedulerFactory = schedulerFactory;\n        <span class=\"keyword\">this</span>.idGenerator = idGenerator;\n    &#125;\n\n    [<span class=\"meta\">HttpPost(<span class=\"string\">&quot;[action]&quot;</span>)</span>]\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">ScheduleTasJob</span>(<span class=\"params\">TasJobRequest request</span>)</span>\n    &#123;\n        <span class=\"comment\">// 使用 SchedulerFactory 取得 Scheduler</span>\n        <span class=\"keyword\">var</span> sch = <span class=\"keyword\">await</span> schedulerFactory.GetScheduler();\n       <span class=\"comment\">// 雪花算法產Id</span>\n        <span class=\"keyword\">var</span> jobid = idGenerator.CreateId();\n        <span class=\"keyword\">var</span> jobKey = <span class=\"keyword\">new</span> JobKey(<span class=\"string\">$&quot;TasJob-<span class=\"subst\">&#123;jobid&#125;</span>&quot;</span>, <span class=\"string\">&quot;TasJobs&quot;</span>);\n        <span class=\"keyword\">var</span> triggerKey = <span class=\"keyword\">new</span> TriggerKey(<span class=\"string\">$&quot;TasJobTrigger-<span class=\"subst\">&#123;jobid&#125;</span>&quot;</span>, <span class=\"string\">&quot;TasJobs&quot;</span>);\n\n        <span class=\"comment\">// 建立Job</span>\n        <span class=\"keyword\">var</span> job = JobBuilder.Create&lt;SendTasJob&gt;()\n            .WithIdentity(jobKey)\n             <span class=\"comment\">//key value 如果有開啟UseProperties 只能有string型別</span>\n            .UsingJobData(<span class=\"string\">&quot;tasid&quot;</span>, request.TasId)\n            .UsingJobData(<span class=\"string\">&quot;welcomeText&quot;</span>, request.WelcomeText)\n            .StoreDurably() <span class=\"comment\">// 使任務持久化</span>\n            .Build();\n\n        <span class=\"comment\">// 設定Trigger</span>\n        ITrigger trigger = TriggerBuilder.Create()\n            .WithIdentity(triggerKey)\n            .StartAt(request.ExecuteAt ?? DateTime.UtcNow) <span class=\"comment\">// 指定執行時間</span>\n            .WithSimpleSchedule(x =&gt; x\n                .WithMisfireHandlingInstructionFireNow() <span class=\"comment\">// 當排程錯過執行時間時立即執行</span>\n                .WithRepeatCount(<span class=\"number\">0</span>) <span class=\"comment\">//只執行一次</span>\n                )\n            .Build();\n\n        <span class=\"keyword\">try</span>\n        &#123;\n           <span class=\"keyword\">await</span> sch.ScheduleJob(job, trigger);\n           Console.WriteLine(<span class=\"string\">$&quot;Scheduled job successfully with JobKey: <span class=\"subst\">&#123;jobKey.Name&#125;</span> and TriggerKey: <span class=\"subst\">&#123;triggerKey.Name&#125;</span>&quot;</span>);\n        &#125;\n        <span class=\"keyword\">catch</span> (Exception ex)\n        &#123;\n            Console.WriteLine(<span class=\"string\">$&quot;Failed to schedule job with JobKey: <span class=\"subst\">&#123;jobKey.Name&#125;</span> and TriggerKey: <span class=\"subst\">&#123;triggerKey.Name&#125;</span>&quot;</span>, ex);\n            <span class=\"keyword\">return</span> StatusCode(<span class=\"number\">500</span>, <span class=\"string\">&quot;Failed to schedule job&quot;</span>);\n        &#125;\n\n        <span class=\"keyword\">return</span> Ok(<span class=\"string\">$&quot;Scheduled job successfully with Job: <span class=\"subst\">&#123;jobKey.Name&#125;</span> and Trigger: <span class=\"subst\">&#123;triggerKey.Name&#125;</span>&quot;</span>);\n    &#125;\n&#125;</code></pre>\n<h2 id=\"Program-cs\">Program.cs</h2>\n<pre><code class=\"highlight C#\"><span class=\"comment\">// 從 appsettings.json 載入 Quartz 配置</span>\nbuilder.Services.Configure&lt;QuartzOptions&gt;(builder.Configuration.GetSection(<span class=\"string\">&quot;Quartz&quot;</span>));\n\n<span class=\"comment\">// 加入 Quartz 服務</span>\nbuilder.Services.AddQuartz(q =&gt;\n&#123;\n    q.UseJobFactory&lt;MicrosoftDependencyInjectionJobFactory&gt;();\n\n    <span class=\"comment\">// 持久化</span>\n    q.UsePersistentStore(opt =&gt;\n    &#123;\n        opt.UseProperties = <span class=\"literal\">false</span>;\n        opt.UseOracle(configuration =&gt;\n        &#123;\n            configuration.ConnectionString = builder.Configuration[<span class=\"string\">&quot;Quartz:quartz.dataSource.default.connectionString&quot;</span>];\n        &#125;);\n        opt.UseNewtonsoftJsonSerializer();\n    &#125;);\n&#125;);\nbuilder.Services.AddQuartzServer(q =&gt; q.WaitForJobsToComplete = <span class=\"literal\">true</span>); <span class=\"comment\">//hosting server</span>\n<span class=\"comment\">//builder.Services.AddQuartzHostedService(options =&gt;</span>\n<span class=\"comment\">//&#123;</span>\n<span class=\"comment\">//    // when shutting down we want jobs to complete gracefully</span>\n<span class=\"comment\">//    options.WaitForJobsToComplete = true;</span>\n<span class=\"comment\">//&#125;);</span>\nbuilder.Services.AddTransient&lt;SendTasJob&gt;(); <span class=\"comment\">// Job註冊</span>\n</code></pre>\n<h2 id=\"AddQuartzServer-vs-AddQuartzHostedService\">AddQuartzServer vs AddQuartzHostedService</h2>\n<p>AddQuartzServer 會多一個 Health Check 檢查 scheduler<br>\nSource Code 如下</p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">using</span> System;\n\n<span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;\n\n<span class=\"meta\">#<span class=\"keyword\">if</span> SUPPORTS_HEALTH_CHECKS</span>\n<span class=\"keyword\">using</span> Quartz.AspNetCore.HealthChecks;\n<span class=\"meta\">#<span class=\"keyword\">endif</span></span>\n\n<span class=\"keyword\">namespace</span> <span class=\"title\">Quartz</span>\n&#123;\n    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">QuartzServiceCollectionExtensions</span>\n    &#123;\n        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IServiceCollection <span class=\"title\">AddQuartzServer</span>(<span class=\"params\"></span></span>\n<span class=\"params\"><span class=\"function\">            <span class=\"keyword\">this</span> IServiceCollection services,</span></span>\n<span class=\"params\"><span class=\"function\">            Action&lt;QuartzHostedServiceOptions&gt;? configure = <span class=\"literal\">null</span></span>)</span>\n        &#123;\n            <span class=\"meta\">#<span class=\"keyword\">if</span> SUPPORTS_HEALTH_CHECKS</span>\n            services\n                .AddHealthChecks()\n                .AddTypeActivatedCheck&lt;QuartzHealthCheck&gt;(<span class=\"string\">&quot;quartz-scheduler&quot;</span>);\n            <span class=\"meta\">#<span class=\"keyword\">endif</span></span>\n\n            <span class=\"keyword\">return</span> services.AddQuartzHostedService(configure);\n        &#125;\n    &#125;\n&#125;</code></pre>\n<h2 id=\"IIS-回收機制，排程失效\">IIS 回收機制，排程失效</h2>\n<ul>\n<li>關閉回收機制(程式應用集區 =&gt; 進階設定)<br>\n<img src=\"/images/InetMgr_ndjANFedAK.png\" alt=\"InetMgr_ndjANFedAK.png\"><br>\n<img src=\"/images/InetMgr_8EXFtPapjN.png\" alt=\"InetMgr_8EXFtPapjN.png\"></li>\n<li>定期呼叫 api 維持 server keep alive (ex.使用 window 排程)</li>\n</ul>\n<pre><code class=\"highlight powershell\"><span class=\"comment\"># File: InvokeApi.ps1</span>\n\n<span class=\"comment\"># 設定 URL</span>\n<span class=\"variable\">$url</span> = <span class=\"string\">&quot;your api url&quot;</span>\n<span class=\"comment\"># 設定 Log Path</span>\n<span class=\"variable\">$logFile</span> = <span class=\"string\">&quot;C:\\Scripts\\InvokeApi.log&quot;</span>\n\n<span class=\"comment\"># 調用 API</span>\n<span class=\"keyword\">try</span> &#123;\n    <span class=\"variable\">$response</span> = <span class=\"built_in\">Invoke-WebRequest</span> <span class=\"literal\">-Uri</span> <span class=\"variable\">$url</span> <span class=\"literal\">-Method</span> Get <span class=\"literal\">-TimeoutSec</span> <span class=\"number\">10</span>\n    <span class=\"variable\">$logEntry</span> = <span class=\"string\">&quot;<span class=\"variable\">$</span>(Get-Date) - API call successfully: <span class=\"variable\">$</span>(<span class=\"variable\">$response</span>.StatusCode)&quot;</span>\n&#125; <span class=\"keyword\">catch</span> &#123;\n    <span class=\"variable\">$logEntry</span> = <span class=\"string\">&quot;<span class=\"variable\">$</span>(Get-Date) - API call failed: <span class=\"variable\">$</span>(<span class=\"variable\">$_</span>.Exception.Message)&quot;</span>\n&#125;\n\n<span class=\"comment\"># 寫入日誌</span>\n<span class=\"variable\">$logEntry</span> | <span class=\"built_in\">Out-File</span> <span class=\"literal\">-FilePath</span> <span class=\"variable\">$logFile</span> <span class=\"literal\">-Append</span>\n</code></pre>\n<ul>\n<li>回收後，應用關閉事件添加應用重啟<br>\n<img src=\"/images/aplstart.png\" alt=\"aplstart.png\"></li>\n</ul>\n<h2 id=\"參考資料\">參考資料</h2>\n<p><a href=\"https://www.quartz-scheduler.net/\">https://www.quartz-scheduler.net/</a><br>\n<a href=\"https://stackoverflow.com/questions/75443765/quartz-aspnetcore-and-hosting-in-asp-net-core\">https://stackoverflow.com/questions/75443765/quartz-aspnetcore-and-hosting-in-asp-net-core</a><br>\n<a href=\"https://blog.csdn.net/qq_18932003/article/details/139672249\">https://blog.csdn.net/qq_18932003/article/details/139672249</a></p>\n","categories":["CSharp"],"tags":["CSharp","Quartz"]},{"title":"Hello World","url":"/2024/11/19/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\">Quick Start</h2>\n<h3 id=\"Create-a-new-post\">Create a new post</h3>\n<pre><code class=\"highlight bash\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\">Run server</h3>\n<pre><code class=\"highlight bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\">Generate static files</h3>\n<pre><code class=\"highlight bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\">Deploy to remote sites</h3>\n<pre><code class=\"highlight bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"C# 使用 curl.exe 呼叫api","url":"/2024/11/19/curl/","content":"<h2 id=\"概述\">概述</h2>\n<p>有時候開發軟體的版本過舊，導致介接 API 會異常困難<br>\n學長說可以用 curl 來呼叫 api，所以就來看看怎麼用</p>\n<h2 id=\"DownLoad-curl-exe\">DownLoad curl.exe</h2>\n<p><a href=\"https://curl.se/download.html#Win64\">https://curl.se/download.html#Win64</a></p>\n<h2 id=\"CurlHelper-cs\">CurlHelper.cs</h2>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CurlHelper</span>\n    &#123;\n        <span class=\"comment\">// curl.exe 路徑</span>\n        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> CurlPath = <span class=\"string\">$&quot;C:\\\\AP06BZ\\\\EXE\\\\CURL.EXE&quot;</span>;\n\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> Get 請求</span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;url&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;headers&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetRequest</span>(<span class=\"params\"><span class=\"built_in\">string</span> url, Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; headers = <span class=\"literal\">null</span></span>)</span>\n        &#123;\n            <span class=\"built_in\">string</span> arugments = <span class=\"string\">$&quot;-X GET \\&quot;<span class=\"subst\">&#123;url&#125;</span>\\&quot;&quot;</span>;\n            <span class=\"keyword\">if</span> (headers != <span class=\"literal\">null</span>)\n            &#123;\n                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> header <span class=\"keyword\">in</span> headers)\n                &#123;\n                    arugments += <span class=\"string\">$&quot; -H \\&quot;<span class=\"subst\">&#123;header.Key&#125;</span>: <span class=\"subst\">&#123;header.Value&#125;</span>\\&quot;&quot;</span>;\n                &#125;\n            &#125;\n            <span class=\"keyword\">return</span> ExecuteCurlCommand(arugments);\n        &#125;\n\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> POST 請求(JSON資料)</span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;url&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;jsonData&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;headers&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">PostRequest</span>(<span class=\"params\"><span class=\"built_in\">string</span> url, <span class=\"built_in\">string</span> jsonData, Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; headers = <span class=\"literal\">null</span></span>)</span>\n        &#123;\n            <span class=\"built_in\">string</span> arguments = <span class=\"string\">$&quot;-X POST -H \\&quot;Content-Type: application/json\\&quot; -d \\&quot;<span class=\"subst\">&#123;jsonData&#125;</span>\\&quot; \\&quot;<span class=\"subst\">&#123;url&#125;</span>\\&quot;&quot;</span>;\n            <span class=\"keyword\">if</span> (headers != <span class=\"literal\">null</span>)\n            &#123;\n                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> header <span class=\"keyword\">in</span> headers)\n                &#123;\n                    arguments += <span class=\"string\">$&quot; -H \\&quot;<span class=\"subst\">&#123;header.Key&#125;</span>: <span class=\"subst\">&#123;header.Value&#125;</span>\\&quot;&quot;</span>;\n                &#125;\n            &#125;\n            <span class=\"keyword\">return</span> ExecuteCurlCommand(arguments);\n        &#125;\n\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> POST 請求(表單資料)</span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;url&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;formData&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;headers&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">PostFormRequest</span>(<span class=\"params\"><span class=\"built_in\">string</span> url, Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; formData, Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; headers = <span class=\"literal\">null</span></span>)</span>\n        &#123;\n            <span class=\"built_in\">string</span> arguments = <span class=\"string\">&quot;-X POST&quot;</span>;\n            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> formData)\n            &#123;\n                arguments += <span class=\"string\">$&quot; -F \\&quot;<span class=\"subst\">&#123;item.Key&#125;</span>=<span class=\"subst\">&#123;item.Value&#125;</span>\\&quot;&quot;</span>;\n            &#125;\n            arguments += <span class=\"string\">$&quot; \\&quot;<span class=\"subst\">&#123;url&#125;</span>\\&quot;&quot;</span>;\n            <span class=\"keyword\">if</span> (headers != <span class=\"literal\">null</span>)\n            &#123;\n                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> header <span class=\"keyword\">in</span> headers)\n                &#123;\n                    arguments += <span class=\"string\">$&quot; -H \\&quot;<span class=\"subst\">&#123;header.Key&#125;</span>: <span class=\"subst\">&#123;header.Value&#125;</span>\\&quot;&quot;</span>;\n                &#125;\n            &#125;\n            <span class=\"keyword\">return</span> ExecuteCurlCommand(arguments);\n        &#125;\n\n\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> 執行curl命令返回輸出</span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;arguments&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span>\n        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">ExecuteCurlCommand</span>(<span class=\"params\"><span class=\"built_in\">string</span> arguments</span>)</span>\n        &#123;\n            <span class=\"keyword\">var</span> startInfo = <span class=\"keyword\">new</span> ProcessStartInfo\n            &#123;\n                FileName = CurlPath,\n                Arguments = arguments,\n                RedirectStandardOutput = <span class=\"literal\">true</span>,\n                UseShellExecute = <span class=\"literal\">false</span>,\n                CreateNoWindow = <span class=\"literal\">true</span>,\n            &#125;;\n            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> p = Process.Start(startInfo))\n            &#123;\n                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> reader = p.StandardOutput)\n                &#123;\n                    <span class=\"keyword\">return</span> reader.ReadToEnd();\n                &#125;\n            &#125;\n        &#125;\n    &#125;</code></pre>\n<h2 id=\"Usage\">Usage</h2>\n<pre><code class=\"highlight C#\"><span class=\"built_in\">string</span> url = <span class=\"string\">&quot;apiurl...&quot;</span>;\n<span class=\"keyword\">var</span> headers = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt;\n&#123;\n      &#123;<span class=\"string\">&quot;Authorization&quot;</span>, <span class=\"string\">&quot;Bearer your_api_key&quot;</span>&#125;\n&#125;;\n<span class=\"built_in\">string</span> response = CurlHelper.GetRequest(url, headers);\nConsole.WriteLine(<span class=\"string\">&quot;Get Response: &quot;</span> + response);</code></pre>\n","categories":["CSharp","Curl"],"tags":["CSharp","Curl"]},{"title":"C# 使用Winscp上傳檔案","url":"/2024/11/19/winscp/","content":"<h2 id=\"概述\">概述</h2>\n<p>接手了前輩的專案，以前都要自己手動上傳檔案，好麻煩<br>\n因此來看看怎麼用 Winscp 套件來串接，配合後續製作成排程程式，自動上傳</p>\n<h2 id=\"Install\">Install</h2>\n<pre><code class=\"highlight powershell\">dotnet add package WinSCP</code></pre>\n<h2 id=\"Example\">Example</h2>\n<pre><code class=\"highlight C#\"><span class=\"comment\">// 連線設定</span>\nSessionOptions sessionOptions = <span class=\"keyword\">new</span> SessionOptions\n&#123;\n    Protocol = Protocol.Sftp,\n    HostName = <span class=\"string\">&quot;hostname&quot;</span>,\n    PortNumber = port,\n    UserName = <span class=\"string\">&quot;xxxx&quot;</span>,\n    SshHostKeyFingerprint = <span class=\"string\">&quot;ssh-rsa 2048 xxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>,\n    SshPrivateKeyPath = <span class=\"string\">&quot;....&quot;</span> <span class=\"comment\">// 私鑰路徑自行調整(選用)</span>\n&#125;;\n\n<span class=\"comment\">// 開啟會話</span>\n<span class=\"keyword\">using</span> <span class=\"keyword\">var</span> session = <span class=\"keyword\">new</span> Session();\nsession.Open(sessionOptions);\n\n<span class=\"comment\">// 定義上傳的文件路徑和遠端目錄</span>\n<span class=\"built_in\">string</span> localFilePath = <span class=\"string\">&quot;文件路徑&quot;</span>;\n<span class=\"built_in\">string</span> remoteDirectory = <span class=\"string\">&quot;伺服器目錄&quot;</span>; <span class=\"comment\">// 遠端伺服器的目錄</span>\n\n<span class=\"comment\">// 上傳文件</span>\nTransferOperationResult transferResult;\ntransferResult = <span class=\"keyword\">this</span>.session.PutFiles(localFilePath, remoteDirectory);\n\n<span class=\"comment\">// 檢查上傳是否成功</span>\ntransferResult.Check();</code></pre>\n<h2 id=\"參考資料\">參考資料</h2>\n<p><a href=\"https://winscp.net/eng/docs/library#csharp\">https://winscp.net/eng/docs/library#csharp</a></p>\n","categories":["CSharp"],"tags":["CSharp","Winscp"]},{"title":"C# 使用IdGen產生Id(雪花算法)","url":"/2024/11/19/snowflake/","content":"<h1>雪花算法</h1>\n<h2 id=\"概述\">概述</h2>\n<p>公司的資料表常常使用很奇怪的欄位來去當識別鍵(例如時間戳)，既然都用時間戳了不如用雪花算法產 ID 當 PK<br>\n雪花算法是 Twitter 開源的生成分散式全域產生 ID 的演算法</p>\n<h2 id=\"格式\">格式</h2>\n<p>雪花 ID 有 64 位元</p>\n<ul>\n<li>1 位為符號位始終是 0</li>\n<li>41 位為時間戳，精度毫秒</li>\n<li>10 位可為(10 位機器 ID) 或 (5 位數據中心 ID + 5 位機器 ID)，可識別 1024 台機器</li>\n<li>12 位為序列號 =&gt; 代表每毫秒可以有 4096 個 ID</li>\n</ul>\n<p><img src=\"/images/snowflake.png\" alt=\"snowflake_structure.image\"></p>\n<h2 id=\"優缺點\">優缺點</h2>\n<h3 id=\"優點\">優點</h3>\n<ol>\n<li>ID 包含時間戳，有序可排序</li>\n<li>簡單速度快</li>\n</ol>\n<h3 id=\"缺點\">缺點</h3>\n<ol>\n<li>依賴系統時間，如果系統時間回退或跳躍，會產生不唯一 ID</li>\n<li>自己手動分配機器 ID，分配不當，產生不唯一 ID</li>\n</ol>\n<h2 id=\"Install\">Install</h2>\n<pre><code class=\"highlight ada\">dotnet add <span class=\"keyword\">package</span> <span class=\"title\">IdGen</span></code></pre>\n<h2 id=\"DI-注入-Optionl\">DI 注入(Optionl)</h2>\n<pre><code class=\"highlight ada\">dotnet add <span class=\"keyword\">package</span> <span class=\"title\">IdGen.DependencyInjection</span></code></pre>\n<h2 id=\"Usage\">Usage</h2>\n<h3 id=\"一般\">一般</h3>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">var</span> generator = <span class=\"keyword\">new</span> IdGenerator(<span class=\"number\">0</span>);\n<span class=\"keyword\">var</span> id = generator.CreateId();</code></pre>\n<h3 id=\"依賴注入\">依賴注入</h3>\n<p>Program.cs</p>\n<pre><code class=\"highlight C#\">builder.Services.AddIdGen(<span class=\"number\">0</span>);</code></pre>\n<p>Example.cs</p>\n<pre><code class=\"highlight C#\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Example</span>\n&#123;\n    <span class=\"comment\">//private readonly IIdGenerator&lt;long&gt; idGenerator;</span>\n    <span class=\"comment\">//public Example (IIdGenerator&lt;long&gt; idGenerator)</span>\n    <span class=\"comment\">//&#123;</span>\n    <span class=\"comment\">//    this.idGenerator = idGenerator;</span>\n    <span class=\"comment\">//&#125;</span>\n\n    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IdGenerator idGenerator;\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Example</span>(<span class=\"params\">IdGenerator idGenerator</span>)</span>\n    &#123;\n        <span class=\"keyword\">this</span>.idGenerator = idGenerator;\n    &#125;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">long</span> <span class=\"title\">GetId</span>()</span>\n    &#123;\n        <span class=\"keyword\">var</span> id = idGenerator.CreateId();\n        <span class=\"keyword\">return</span> id;\n    &#125;\n&#125;</code></pre>\n<h2 id=\"參考資料\">參考資料</h2>\n<p><a href=\"https://github.com/RobThree/IdGen?tab=readme-ov-file\">https://github.com/RobThree/IdGen?tab=readme-ov-file</a></p>\n","categories":["CSharp"],"tags":["CSharp","演算法"]},{"title":"標籤","url":"/tags/index.html","content":""},{"title":"categories","url":"/categories/index.html","content":""}]